<?php


/**
 * Base class that represents a query for the 'tipodestino' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Thu Feb 20 13:36:21 2014
 *
 * @method     TipodestinoQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     TipodestinoQuery orderByEntePublico($order = Criteria::ASC) Order by the ente_publico column
 * @method     TipodestinoQuery orderByDonacion($order = Criteria::ASC) Order by the donacion column
 * @method     TipodestinoQuery orderByGratuita($order = Criteria::ASC) Order by the gratuita column
 * @method     TipodestinoQuery orderByImportacion($order = Criteria::ASC) Order by the importacion column
 * @method     TipodestinoQuery orderByExportacion($order = Criteria::ASC) Order by the exportacion column
 * @method     TipodestinoQuery orderByOtro($order = Criteria::ASC) Order by the otro column
 * @method     TipodestinoQuery orderByIdFeria($order = Criteria::ASC) Order by the id_feria column
 * @method     TipodestinoQuery orderByIdPais($order = Criteria::ASC) Order by the id_pais column
 * @method     TipodestinoQuery orderByIdEstado($order = Criteria::ASC) Order by the id_estado column
 * @method     TipodestinoQuery orderByIdLibreria($order = Criteria::ASC) Order by the id_libreria column
 * @method     TipodestinoQuery orderByIdMunicipio($order = Criteria::ASC) Order by the id_municipio column
 *
 * @method     TipodestinoQuery groupById() Group by the id column
 * @method     TipodestinoQuery groupByEntePublico() Group by the ente_publico column
 * @method     TipodestinoQuery groupByDonacion() Group by the donacion column
 * @method     TipodestinoQuery groupByGratuita() Group by the gratuita column
 * @method     TipodestinoQuery groupByImportacion() Group by the importacion column
 * @method     TipodestinoQuery groupByExportacion() Group by the exportacion column
 * @method     TipodestinoQuery groupByOtro() Group by the otro column
 * @method     TipodestinoQuery groupByIdFeria() Group by the id_feria column
 * @method     TipodestinoQuery groupByIdPais() Group by the id_pais column
 * @method     TipodestinoQuery groupByIdEstado() Group by the id_estado column
 * @method     TipodestinoQuery groupByIdLibreria() Group by the id_libreria column
 * @method     TipodestinoQuery groupByIdMunicipio() Group by the id_municipio column
 *
 * @method     TipodestinoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     TipodestinoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     TipodestinoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     TipodestinoQuery leftJoinFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the Feria relation
 * @method     TipodestinoQuery rightJoinFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Feria relation
 * @method     TipodestinoQuery innerJoinFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the Feria relation
 *
 * @method     TipodestinoQuery leftJoinPais($relationAlias = null) Adds a LEFT JOIN clause to the query using the Pais relation
 * @method     TipodestinoQuery rightJoinPais($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Pais relation
 * @method     TipodestinoQuery innerJoinPais($relationAlias = null) Adds a INNER JOIN clause to the query using the Pais relation
 *
 * @method     TipodestinoQuery leftJoinEstado($relationAlias = null) Adds a LEFT JOIN clause to the query using the Estado relation
 * @method     TipodestinoQuery rightJoinEstado($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Estado relation
 * @method     TipodestinoQuery innerJoinEstado($relationAlias = null) Adds a INNER JOIN clause to the query using the Estado relation
 *
 * @method     TipodestinoQuery leftJoinLibreria($relationAlias = null) Adds a LEFT JOIN clause to the query using the Libreria relation
 * @method     TipodestinoQuery rightJoinLibreria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Libreria relation
 * @method     TipodestinoQuery innerJoinLibreria($relationAlias = null) Adds a INNER JOIN clause to the query using the Libreria relation
 *
 * @method     TipodestinoQuery leftJoinMunicipio($relationAlias = null) Adds a LEFT JOIN clause to the query using the Municipio relation
 * @method     TipodestinoQuery rightJoinMunicipio($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Municipio relation
 * @method     TipodestinoQuery innerJoinMunicipio($relationAlias = null) Adds a INNER JOIN clause to the query using the Municipio relation
 *
 * @method     TipodestinoQuery leftJoinDistribucion($relationAlias = null) Adds a LEFT JOIN clause to the query using the Distribucion relation
 * @method     TipodestinoQuery rightJoinDistribucion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Distribucion relation
 * @method     TipodestinoQuery innerJoinDistribucion($relationAlias = null) Adds a INNER JOIN clause to the query using the Distribucion relation
 *
 * @method     TipodestinoQuery leftJoinVenta($relationAlias = null) Adds a LEFT JOIN clause to the query using the Venta relation
 * @method     TipodestinoQuery rightJoinVenta($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Venta relation
 * @method     TipodestinoQuery innerJoinVenta($relationAlias = null) Adds a INNER JOIN clause to the query using the Venta relation
 *
 * @method     Tipodestino findOne(PropelPDO $con = null) Return the first Tipodestino matching the query
 * @method     Tipodestino findOneOrCreate(PropelPDO $con = null) Return the first Tipodestino matching the query, or a new Tipodestino object populated from the query conditions when no match is found
 *
 * @method     Tipodestino findOneById(string $id) Return the first Tipodestino filtered by the id column
 * @method     Tipodestino findOneByEntePublico(boolean $ente_publico) Return the first Tipodestino filtered by the ente_publico column
 * @method     Tipodestino findOneByDonacion(boolean $donacion) Return the first Tipodestino filtered by the donacion column
 * @method     Tipodestino findOneByGratuita(boolean $gratuita) Return the first Tipodestino filtered by the gratuita column
 * @method     Tipodestino findOneByImportacion(boolean $importacion) Return the first Tipodestino filtered by the importacion column
 * @method     Tipodestino findOneByExportacion(boolean $exportacion) Return the first Tipodestino filtered by the exportacion column
 * @method     Tipodestino findOneByOtro(string $otro) Return the first Tipodestino filtered by the otro column
 * @method     Tipodestino findOneByIdFeria(int $id_feria) Return the first Tipodestino filtered by the id_feria column
 * @method     Tipodestino findOneByIdPais(int $id_pais) Return the first Tipodestino filtered by the id_pais column
 * @method     Tipodestino findOneByIdEstado(int $id_estado) Return the first Tipodestino filtered by the id_estado column
 * @method     Tipodestino findOneByIdLibreria(int $id_libreria) Return the first Tipodestino filtered by the id_libreria column
 * @method     Tipodestino findOneByIdMunicipio(int $id_municipio) Return the first Tipodestino filtered by the id_municipio column
 *
 * @method     array findById(string $id) Return Tipodestino objects filtered by the id column
 * @method     array findByEntePublico(boolean $ente_publico) Return Tipodestino objects filtered by the ente_publico column
 * @method     array findByDonacion(boolean $donacion) Return Tipodestino objects filtered by the donacion column
 * @method     array findByGratuita(boolean $gratuita) Return Tipodestino objects filtered by the gratuita column
 * @method     array findByImportacion(boolean $importacion) Return Tipodestino objects filtered by the importacion column
 * @method     array findByExportacion(boolean $exportacion) Return Tipodestino objects filtered by the exportacion column
 * @method     array findByOtro(string $otro) Return Tipodestino objects filtered by the otro column
 * @method     array findByIdFeria(int $id_feria) Return Tipodestino objects filtered by the id_feria column
 * @method     array findByIdPais(int $id_pais) Return Tipodestino objects filtered by the id_pais column
 * @method     array findByIdEstado(int $id_estado) Return Tipodestino objects filtered by the id_estado column
 * @method     array findByIdLibreria(int $id_libreria) Return Tipodestino objects filtered by the id_libreria column
 * @method     array findByIdMunicipio(int $id_municipio) Return Tipodestino objects filtered by the id_municipio column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTipodestinoQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseTipodestinoQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Tipodestino', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new TipodestinoQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    TipodestinoQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof TipodestinoQuery) {
			return $criteria;
		}
		$query = new TipodestinoQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Tipodestino|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = TipodestinoPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(TipodestinoPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(TipodestinoPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     string|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(TipodestinoPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the ente_publico column
	 * 
	 * @param     boolean|string $entePublico The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByEntePublico($entePublico = null, $comparison = null)
	{
		if (is_string($entePublico)) {
			$ente_publico = in_array(strtolower($entePublico), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(TipodestinoPeer::ENTE_PUBLICO, $entePublico, $comparison);
	}

	/**
	 * Filter the query on the donacion column
	 * 
	 * @param     boolean|string $donacion The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByDonacion($donacion = null, $comparison = null)
	{
		if (is_string($donacion)) {
			$donacion = in_array(strtolower($donacion), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(TipodestinoPeer::DONACION, $donacion, $comparison);
	}

	/**
	 * Filter the query on the gratuita column
	 * 
	 * @param     boolean|string $gratuita The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByGratuita($gratuita = null, $comparison = null)
	{
		if (is_string($gratuita)) {
			$gratuita = in_array(strtolower($gratuita), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(TipodestinoPeer::GRATUITA, $gratuita, $comparison);
	}

	/**
	 * Filter the query on the importacion column
	 * 
	 * @param     boolean|string $importacion The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByImportacion($importacion = null, $comparison = null)
	{
		if (is_string($importacion)) {
			$importacion = in_array(strtolower($importacion), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(TipodestinoPeer::IMPORTACION, $importacion, $comparison);
	}

	/**
	 * Filter the query on the exportacion column
	 * 
	 * @param     boolean|string $exportacion The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByExportacion($exportacion = null, $comparison = null)
	{
		if (is_string($exportacion)) {
			$exportacion = in_array(strtolower($exportacion), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(TipodestinoPeer::EXPORTACION, $exportacion, $comparison);
	}

	/**
	 * Filter the query on the otro column
	 * 
	 * @param     string $otro The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByOtro($otro = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($otro)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $otro)) {
				$otro = str_replace('*', '%', $otro);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(TipodestinoPeer::OTRO, $otro, $comparison);
	}

	/**
	 * Filter the query on the id_feria column
	 * 
	 * @param     int|array $idFeria The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByIdFeria($idFeria = null, $comparison = null)
	{
		if (is_array($idFeria)) {
			$useMinMax = false;
			if (isset($idFeria['min'])) {
				$this->addUsingAlias(TipodestinoPeer::ID_FERIA, $idFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idFeria['max'])) {
				$this->addUsingAlias(TipodestinoPeer::ID_FERIA, $idFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TipodestinoPeer::ID_FERIA, $idFeria, $comparison);
	}

	/**
	 * Filter the query on the id_pais column
	 * 
	 * @param     int|array $idPais The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByIdPais($idPais = null, $comparison = null)
	{
		if (is_array($idPais)) {
			$useMinMax = false;
			if (isset($idPais['min'])) {
				$this->addUsingAlias(TipodestinoPeer::ID_PAIS, $idPais['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idPais['max'])) {
				$this->addUsingAlias(TipodestinoPeer::ID_PAIS, $idPais['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TipodestinoPeer::ID_PAIS, $idPais, $comparison);
	}

	/**
	 * Filter the query on the id_estado column
	 * 
	 * @param     int|array $idEstado The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByIdEstado($idEstado = null, $comparison = null)
	{
		if (is_array($idEstado)) {
			$useMinMax = false;
			if (isset($idEstado['min'])) {
				$this->addUsingAlias(TipodestinoPeer::ID_ESTADO, $idEstado['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idEstado['max'])) {
				$this->addUsingAlias(TipodestinoPeer::ID_ESTADO, $idEstado['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TipodestinoPeer::ID_ESTADO, $idEstado, $comparison);
	}

	/**
	 * Filter the query on the id_libreria column
	 * 
	 * @param     int|array $idLibreria The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByIdLibreria($idLibreria = null, $comparison = null)
	{
		if (is_array($idLibreria)) {
			$useMinMax = false;
			if (isset($idLibreria['min'])) {
				$this->addUsingAlias(TipodestinoPeer::ID_LIBRERIA, $idLibreria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idLibreria['max'])) {
				$this->addUsingAlias(TipodestinoPeer::ID_LIBRERIA, $idLibreria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TipodestinoPeer::ID_LIBRERIA, $idLibreria, $comparison);
	}

	/**
	 * Filter the query on the id_municipio column
	 * 
	 * @param     int|array $idMunicipio The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByIdMunicipio($idMunicipio = null, $comparison = null)
	{
		if (is_array($idMunicipio)) {
			$useMinMax = false;
			if (isset($idMunicipio['min'])) {
				$this->addUsingAlias(TipodestinoPeer::ID_MUNICIPIO, $idMunicipio['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idMunicipio['max'])) {
				$this->addUsingAlias(TipodestinoPeer::ID_MUNICIPIO, $idMunicipio['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TipodestinoPeer::ID_MUNICIPIO, $idMunicipio, $comparison);
	}

	/**
	 * Filter the query by a related Feria object
	 *
	 * @param     Feria $feria  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByFeria($feria, $comparison = null)
	{
		return $this
			->addUsingAlias(TipodestinoPeer::ID_FERIA, $feria->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Feria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function joinFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Feria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Feria');
		}
		
		return $this;
	}

	/**
	 * Use the Feria relation Feria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Feria', 'FeriaQuery');
	}

	/**
	 * Filter the query by a related Pais object
	 *
	 * @param     Pais $pais  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByPais($pais, $comparison = null)
	{
		return $this
			->addUsingAlias(TipodestinoPeer::ID_PAIS, $pais->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Pais relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function joinPais($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Pais');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Pais');
		}
		
		return $this;
	}

	/**
	 * Use the Pais relation Pais object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery A secondary query class using the current class as primary query
	 */
	public function usePaisQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPais($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Pais', 'PaisQuery');
	}

	/**
	 * Filter the query by a related Estado object
	 *
	 * @param     Estado $estado  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByEstado($estado, $comparison = null)
	{
		return $this
			->addUsingAlias(TipodestinoPeer::ID_ESTADO, $estado->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Estado relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function joinEstado($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Estado');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Estado');
		}
		
		return $this;
	}

	/**
	 * Use the Estado relation Estado object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EstadoQuery A secondary query class using the current class as primary query
	 */
	public function useEstadoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinEstado($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Estado', 'EstadoQuery');
	}

	/**
	 * Filter the query by a related Libreria object
	 *
	 * @param     Libreria $libreria  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByLibreria($libreria, $comparison = null)
	{
		return $this
			->addUsingAlias(TipodestinoPeer::ID_LIBRERIA, $libreria->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Libreria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function joinLibreria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Libreria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Libreria');
		}
		
		return $this;
	}

	/**
	 * Use the Libreria relation Libreria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    LibreriaQuery A secondary query class using the current class as primary query
	 */
	public function useLibreriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinLibreria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Libreria', 'LibreriaQuery');
	}

	/**
	 * Filter the query by a related Municipio object
	 *
	 * @param     Municipio $municipio  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByMunicipio($municipio, $comparison = null)
	{
		return $this
			->addUsingAlias(TipodestinoPeer::ID_MUNICIPIO, $municipio->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Municipio relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function joinMunicipio($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Municipio');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Municipio');
		}
		
		return $this;
	}

	/**
	 * Use the Municipio relation Municipio object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    MunicipioQuery A secondary query class using the current class as primary query
	 */
	public function useMunicipioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinMunicipio($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Municipio', 'MunicipioQuery');
	}

	/**
	 * Filter the query by a related Distribucion object
	 *
	 * @param     Distribucion $distribucion  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByDistribucion($distribucion, $comparison = null)
	{
		return $this
			->addUsingAlias(TipodestinoPeer::ID, $distribucion->getIdTipodestino(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Distribucion relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function joinDistribucion($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Distribucion');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Distribucion');
		}
		
		return $this;
	}

	/**
	 * Use the Distribucion relation Distribucion object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    DistribucionQuery A secondary query class using the current class as primary query
	 */
	public function useDistribucionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinDistribucion($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Distribucion', 'DistribucionQuery');
	}

	/**
	 * Filter the query by a related Venta object
	 *
	 * @param     Venta $venta  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function filterByVenta($venta, $comparison = null)
	{
		return $this
			->addUsingAlias(TipodestinoPeer::ID, $venta->getIdTipodestino(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Venta relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function joinVenta($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Venta');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Venta');
		}
		
		return $this;
	}

	/**
	 * Use the Venta relation Venta object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    VentaQuery A secondary query class using the current class as primary query
	 */
	public function useVentaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinVenta($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Venta', 'VentaQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Tipodestino $tipodestino Object to remove from the list of results
	 *
	 * @return    TipodestinoQuery The current query, for fluid interface
	 */
	public function prune($tipodestino = null)
	{
		if ($tipodestino) {
			$this->addUsingAlias(TipodestinoPeer::ID, $tipodestino->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseTipodestinoQuery
