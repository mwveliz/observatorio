<?php


/**
 * Base class that represents a row from the 'historico' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Thu Feb 20 13:36:21 2014
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseHistorico extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'HistoricoPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        HistoricoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the id_edicion field.
	 * @var        int
	 */
	protected $id_edicion;

	/**
	 * The value for the id_status field.
	 * @var        int
	 */
	protected $id_status;

	/**
	 * The value for the id_institucion field.
	 * @var        int
	 */
	protected $id_institucion;

	/**
	 * The value for the fecha_inicio field.
	 * @var        string
	 */
	protected $fecha_inicio;

	/**
	 * The value for the fecha_fin field.
	 * @var        string
	 */
	protected $fecha_fin;

	/**
	 * The value for the status_actual field.
	 * @var        boolean
	 */
	protected $status_actual;

	/**
	 * The value for the id_impresion field.
	 * @var        int
	 */
	protected $id_impresion;

	/**
	 * The value for the id_distribucion field.
	 * @var        int
	 */
	protected $id_distribucion;

	/**
	 * The value for the id_venta field.
	 * @var        int
	 */
	protected $id_venta;

	/**
	 * @var        Edicion
	 */
	protected $aEdicion;

	/**
	 * @var        Status
	 */
	protected $aStatus;

	/**
	 * @var        Institucion
	 */
	protected $aInstitucion;

	/**
	 * @var        Impresion
	 */
	protected $aImpresion;

	/**
	 * @var        Distribucion
	 */
	protected $aDistribucion;

	/**
	 * @var        Venta
	 */
	protected $aVenta;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [id_edicion] column value.
	 * 
	 * @return     int
	 */
	public function getIdEdicion()
	{
		return $this->id_edicion;
	}

	/**
	 * Get the [id_status] column value.
	 * 
	 * @return     int
	 */
	public function getIdStatus()
	{
		return $this->id_status;
	}

	/**
	 * Get the [id_institucion] column value.
	 * 
	 * @return     int
	 */
	public function getIdInstitucion()
	{
		return $this->id_institucion;
	}

	/**
	 * Get the [fecha_inicio] column value.
	 * 
	 * @return     string
	 */
	public function getFechaInicio()
	{
		return $this->fecha_inicio;
	}

	/**
	 * Get the [fecha_fin] column value.
	 * 
	 * @return     string
	 */
	public function getFechaFin()
	{
		return $this->fecha_fin;
	}

	/**
	 * Get the [status_actual] column value.
	 * 
	 * @return     boolean
	 */
	public function getStatusActual()
	{
		return $this->status_actual;
	}

	/**
	 * Get the [id_impresion] column value.
	 * 
	 * @return     int
	 */
	public function getIdImpresion()
	{
		return $this->id_impresion;
	}

	/**
	 * Get the [id_distribucion] column value.
	 * 
	 * @return     int
	 */
	public function getIdDistribucion()
	{
		return $this->id_distribucion;
	}

	/**
	 * Get the [id_venta] column value.
	 * 
	 * @return     int
	 */
	public function getIdVenta()
	{
		return $this->id_venta;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     Historico The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = HistoricoPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [id_edicion] column.
	 * 
	 * @param      int $v new value
	 * @return     Historico The current object (for fluent API support)
	 */
	public function setIdEdicion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_edicion !== $v) {
			$this->id_edicion = $v;
			$this->modifiedColumns[] = HistoricoPeer::ID_EDICION;
		}

		if ($this->aEdicion !== null && $this->aEdicion->getId() !== $v) {
			$this->aEdicion = null;
		}

		return $this;
	} // setIdEdicion()

	/**
	 * Set the value of [id_status] column.
	 * 
	 * @param      int $v new value
	 * @return     Historico The current object (for fluent API support)
	 */
	public function setIdStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_status !== $v) {
			$this->id_status = $v;
			$this->modifiedColumns[] = HistoricoPeer::ID_STATUS;
		}

		if ($this->aStatus !== null && $this->aStatus->getId() !== $v) {
			$this->aStatus = null;
		}

		return $this;
	} // setIdStatus()

	/**
	 * Set the value of [id_institucion] column.
	 * 
	 * @param      int $v new value
	 * @return     Historico The current object (for fluent API support)
	 */
	public function setIdInstitucion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_institucion !== $v) {
			$this->id_institucion = $v;
			$this->modifiedColumns[] = HistoricoPeer::ID_INSTITUCION;
		}

		if ($this->aInstitucion !== null && $this->aInstitucion->getId() !== $v) {
			$this->aInstitucion = null;
		}

		return $this;
	} // setIdInstitucion()

	/**
	 * Set the value of [fecha_inicio] column.
	 * 
	 * @param      string $v new value
	 * @return     Historico The current object (for fluent API support)
	 */
	public function setFechaInicio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fecha_inicio !== $v) {
			$this->fecha_inicio = $v;
			$this->modifiedColumns[] = HistoricoPeer::FECHA_INICIO;
		}

		return $this;
	} // setFechaInicio()

	/**
	 * Set the value of [fecha_fin] column.
	 * 
	 * @param      string $v new value
	 * @return     Historico The current object (for fluent API support)
	 */
	public function setFechaFin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fecha_fin !== $v) {
			$this->fecha_fin = $v;
			$this->modifiedColumns[] = HistoricoPeer::FECHA_FIN;
		}

		return $this;
	} // setFechaFin()

	/**
	 * Set the value of [status_actual] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Historico The current object (for fluent API support)
	 */
	public function setStatusActual($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->status_actual !== $v) {
			$this->status_actual = $v;
			$this->modifiedColumns[] = HistoricoPeer::STATUS_ACTUAL;
		}

		return $this;
	} // setStatusActual()

	/**
	 * Set the value of [id_impresion] column.
	 * 
	 * @param      int $v new value
	 * @return     Historico The current object (for fluent API support)
	 */
	public function setIdImpresion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_impresion !== $v) {
			$this->id_impresion = $v;
			$this->modifiedColumns[] = HistoricoPeer::ID_IMPRESION;
		}

		if ($this->aImpresion !== null && $this->aImpresion->getId() !== $v) {
			$this->aImpresion = null;
		}

		return $this;
	} // setIdImpresion()

	/**
	 * Set the value of [id_distribucion] column.
	 * 
	 * @param      int $v new value
	 * @return     Historico The current object (for fluent API support)
	 */
	public function setIdDistribucion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_distribucion !== $v) {
			$this->id_distribucion = $v;
			$this->modifiedColumns[] = HistoricoPeer::ID_DISTRIBUCION;
		}

		if ($this->aDistribucion !== null && $this->aDistribucion->getId() !== $v) {
			$this->aDistribucion = null;
		}

		return $this;
	} // setIdDistribucion()

	/**
	 * Set the value of [id_venta] column.
	 * 
	 * @param      int $v new value
	 * @return     Historico The current object (for fluent API support)
	 */
	public function setIdVenta($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_venta !== $v) {
			$this->id_venta = $v;
			$this->modifiedColumns[] = HistoricoPeer::ID_VENTA;
		}

		if ($this->aVenta !== null && $this->aVenta->getId() !== $v) {
			$this->aVenta = null;
		}

		return $this;
	} // setIdVenta()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->id_edicion = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->id_status = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->id_institucion = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->fecha_inicio = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->fecha_fin = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->status_actual = ($row[$startcol + 6] !== null) ? (boolean) $row[$startcol + 6] : null;
			$this->id_impresion = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->id_distribucion = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->id_venta = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 10; // 10 = HistoricoPeer::NUM_COLUMNS - HistoricoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Historico object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aEdicion !== null && $this->id_edicion !== $this->aEdicion->getId()) {
			$this->aEdicion = null;
		}
		if ($this->aStatus !== null && $this->id_status !== $this->aStatus->getId()) {
			$this->aStatus = null;
		}
		if ($this->aInstitucion !== null && $this->id_institucion !== $this->aInstitucion->getId()) {
			$this->aInstitucion = null;
		}
		if ($this->aImpresion !== null && $this->id_impresion !== $this->aImpresion->getId()) {
			$this->aImpresion = null;
		}
		if ($this->aDistribucion !== null && $this->id_distribucion !== $this->aDistribucion->getId()) {
			$this->aDistribucion = null;
		}
		if ($this->aVenta !== null && $this->id_venta !== $this->aVenta->getId()) {
			$this->aVenta = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(HistoricoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = HistoricoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aEdicion = null;
			$this->aStatus = null;
			$this->aInstitucion = null;
			$this->aImpresion = null;
			$this->aDistribucion = null;
			$this->aVenta = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(HistoricoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseHistorico:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				HistoricoQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseHistorico:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(HistoricoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseHistorico:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseHistorico:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				HistoricoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEdicion !== null) {
				if ($this->aEdicion->isModified() || $this->aEdicion->isNew()) {
					$affectedRows += $this->aEdicion->save($con);
				}
				$this->setEdicion($this->aEdicion);
			}

			if ($this->aStatus !== null) {
				if ($this->aStatus->isModified() || $this->aStatus->isNew()) {
					$affectedRows += $this->aStatus->save($con);
				}
				$this->setStatus($this->aStatus);
			}

			if ($this->aInstitucion !== null) {
				if ($this->aInstitucion->isModified() || $this->aInstitucion->isNew()) {
					$affectedRows += $this->aInstitucion->save($con);
				}
				$this->setInstitucion($this->aInstitucion);
			}

			if ($this->aImpresion !== null) {
				if ($this->aImpresion->isModified() || $this->aImpresion->isNew()) {
					$affectedRows += $this->aImpresion->save($con);
				}
				$this->setImpresion($this->aImpresion);
			}

			if ($this->aDistribucion !== null) {
				if ($this->aDistribucion->isModified() || $this->aDistribucion->isNew()) {
					$affectedRows += $this->aDistribucion->save($con);
				}
				$this->setDistribucion($this->aDistribucion);
			}

			if ($this->aVenta !== null) {
				if ($this->aVenta->isModified() || $this->aVenta->isNew()) {
					$affectedRows += $this->aVenta->save($con);
				}
				$this->setVenta($this->aVenta);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = HistoricoPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(HistoricoPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.HistoricoPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows += 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows += HistoricoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEdicion !== null) {
				if (!$this->aEdicion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEdicion->getValidationFailures());
				}
			}

			if ($this->aStatus !== null) {
				if (!$this->aStatus->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aStatus->getValidationFailures());
				}
			}

			if ($this->aInstitucion !== null) {
				if (!$this->aInstitucion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aInstitucion->getValidationFailures());
				}
			}

			if ($this->aImpresion !== null) {
				if (!$this->aImpresion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aImpresion->getValidationFailures());
				}
			}

			if ($this->aDistribucion !== null) {
				if (!$this->aDistribucion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aDistribucion->getValidationFailures());
				}
			}

			if ($this->aVenta !== null) {
				if (!$this->aVenta->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aVenta->getValidationFailures());
				}
			}


			if (($retval = HistoricoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = HistoricoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getIdEdicion();
				break;
			case 2:
				return $this->getIdStatus();
				break;
			case 3:
				return $this->getIdInstitucion();
				break;
			case 4:
				return $this->getFechaInicio();
				break;
			case 5:
				return $this->getFechaFin();
				break;
			case 6:
				return $this->getStatusActual();
				break;
			case 7:
				return $this->getIdImpresion();
				break;
			case 8:
				return $this->getIdDistribucion();
				break;
			case 9:
				return $this->getIdVenta();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $includeForeignObjects = false)
	{
		$keys = HistoricoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getIdEdicion(),
			$keys[2] => $this->getIdStatus(),
			$keys[3] => $this->getIdInstitucion(),
			$keys[4] => $this->getFechaInicio(),
			$keys[5] => $this->getFechaFin(),
			$keys[6] => $this->getStatusActual(),
			$keys[7] => $this->getIdImpresion(),
			$keys[8] => $this->getIdDistribucion(),
			$keys[9] => $this->getIdVenta(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->aEdicion) {
				$result['Edicion'] = $this->aEdicion->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aStatus) {
				$result['Status'] = $this->aStatus->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aInstitucion) {
				$result['Institucion'] = $this->aInstitucion->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aImpresion) {
				$result['Impresion'] = $this->aImpresion->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aDistribucion) {
				$result['Distribucion'] = $this->aDistribucion->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aVenta) {
				$result['Venta'] = $this->aVenta->toArray($keyType, $includeLazyLoadColumns, true);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = HistoricoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setIdEdicion($value);
				break;
			case 2:
				$this->setIdStatus($value);
				break;
			case 3:
				$this->setIdInstitucion($value);
				break;
			case 4:
				$this->setFechaInicio($value);
				break;
			case 5:
				$this->setFechaFin($value);
				break;
			case 6:
				$this->setStatusActual($value);
				break;
			case 7:
				$this->setIdImpresion($value);
				break;
			case 8:
				$this->setIdDistribucion($value);
				break;
			case 9:
				$this->setIdVenta($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = HistoricoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdEdicion($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIdStatus($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIdInstitucion($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFechaInicio($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setFechaFin($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setStatusActual($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIdImpresion($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIdDistribucion($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIdVenta($arr[$keys[9]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(HistoricoPeer::DATABASE_NAME);

		if ($this->isColumnModified(HistoricoPeer::ID)) $criteria->add(HistoricoPeer::ID, $this->id);
		if ($this->isColumnModified(HistoricoPeer::ID_EDICION)) $criteria->add(HistoricoPeer::ID_EDICION, $this->id_edicion);
		if ($this->isColumnModified(HistoricoPeer::ID_STATUS)) $criteria->add(HistoricoPeer::ID_STATUS, $this->id_status);
		if ($this->isColumnModified(HistoricoPeer::ID_INSTITUCION)) $criteria->add(HistoricoPeer::ID_INSTITUCION, $this->id_institucion);
		if ($this->isColumnModified(HistoricoPeer::FECHA_INICIO)) $criteria->add(HistoricoPeer::FECHA_INICIO, $this->fecha_inicio);
		if ($this->isColumnModified(HistoricoPeer::FECHA_FIN)) $criteria->add(HistoricoPeer::FECHA_FIN, $this->fecha_fin);
		if ($this->isColumnModified(HistoricoPeer::STATUS_ACTUAL)) $criteria->add(HistoricoPeer::STATUS_ACTUAL, $this->status_actual);
		if ($this->isColumnModified(HistoricoPeer::ID_IMPRESION)) $criteria->add(HistoricoPeer::ID_IMPRESION, $this->id_impresion);
		if ($this->isColumnModified(HistoricoPeer::ID_DISTRIBUCION)) $criteria->add(HistoricoPeer::ID_DISTRIBUCION, $this->id_distribucion);
		if ($this->isColumnModified(HistoricoPeer::ID_VENTA)) $criteria->add(HistoricoPeer::ID_VENTA, $this->id_venta);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(HistoricoPeer::DATABASE_NAME);
		$criteria->add(HistoricoPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Historico (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{
		$copyObj->setIdEdicion($this->id_edicion);
		$copyObj->setIdStatus($this->id_status);
		$copyObj->setIdInstitucion($this->id_institucion);
		$copyObj->setFechaInicio($this->fecha_inicio);
		$copyObj->setFechaFin($this->fecha_fin);
		$copyObj->setStatusActual($this->status_actual);
		$copyObj->setIdImpresion($this->id_impresion);
		$copyObj->setIdDistribucion($this->id_distribucion);
		$copyObj->setIdVenta($this->id_venta);

		$copyObj->setNew(true);
		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Historico Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     HistoricoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new HistoricoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Edicion object.
	 *
	 * @param      Edicion $v
	 * @return     Historico The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEdicion(Edicion $v = null)
	{
		if ($v === null) {
			$this->setIdEdicion(NULL);
		} else {
			$this->setIdEdicion($v->getId());
		}

		$this->aEdicion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Edicion object, it will not be re-added.
		if ($v !== null) {
			$v->addHistorico($this);
		}

		return $this;
	}


	/**
	 * Get the associated Edicion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Edicion The associated Edicion object.
	 * @throws     PropelException
	 */
	public function getEdicion(PropelPDO $con = null)
	{
		if ($this->aEdicion === null && ($this->id_edicion !== null)) {
			$this->aEdicion = EdicionQuery::create()->findPk($this->id_edicion, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aEdicion->addHistoricos($this);
			 */
		}
		return $this->aEdicion;
	}

	/**
	 * Declares an association between this object and a Status object.
	 *
	 * @param      Status $v
	 * @return     Historico The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setStatus(Status $v = null)
	{
		if ($v === null) {
			$this->setIdStatus(NULL);
		} else {
			$this->setIdStatus($v->getId());
		}

		$this->aStatus = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Status object, it will not be re-added.
		if ($v !== null) {
			$v->addHistorico($this);
		}

		return $this;
	}


	/**
	 * Get the associated Status object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Status The associated Status object.
	 * @throws     PropelException
	 */
	public function getStatus(PropelPDO $con = null)
	{
		if ($this->aStatus === null && ($this->id_status !== null)) {
			$this->aStatus = StatusQuery::create()->findPk($this->id_status, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aStatus->addHistoricos($this);
			 */
		}
		return $this->aStatus;
	}

	/**
	 * Declares an association between this object and a Institucion object.
	 *
	 * @param      Institucion $v
	 * @return     Historico The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setInstitucion(Institucion $v = null)
	{
		if ($v === null) {
			$this->setIdInstitucion(NULL);
		} else {
			$this->setIdInstitucion($v->getId());
		}

		$this->aInstitucion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Institucion object, it will not be re-added.
		if ($v !== null) {
			$v->addHistorico($this);
		}

		return $this;
	}


	/**
	 * Get the associated Institucion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Institucion The associated Institucion object.
	 * @throws     PropelException
	 */
	public function getInstitucion(PropelPDO $con = null)
	{
		if ($this->aInstitucion === null && ($this->id_institucion !== null)) {
			$this->aInstitucion = InstitucionQuery::create()->findPk($this->id_institucion, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aInstitucion->addHistoricos($this);
			 */
		}
		return $this->aInstitucion;
	}

	/**
	 * Declares an association between this object and a Impresion object.
	 *
	 * @param      Impresion $v
	 * @return     Historico The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setImpresion(Impresion $v = null)
	{
		if ($v === null) {
			$this->setIdImpresion(NULL);
		} else {
			$this->setIdImpresion($v->getId());
		}

		$this->aImpresion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Impresion object, it will not be re-added.
		if ($v !== null) {
			$v->addHistorico($this);
		}

		return $this;
	}


	/**
	 * Get the associated Impresion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Impresion The associated Impresion object.
	 * @throws     PropelException
	 */
	public function getImpresion(PropelPDO $con = null)
	{
		if ($this->aImpresion === null && ($this->id_impresion !== null)) {
			$this->aImpresion = ImpresionQuery::create()->findPk($this->id_impresion, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aImpresion->addHistoricos($this);
			 */
		}
		return $this->aImpresion;
	}

	/**
	 * Declares an association between this object and a Distribucion object.
	 *
	 * @param      Distribucion $v
	 * @return     Historico The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setDistribucion(Distribucion $v = null)
	{
		if ($v === null) {
			$this->setIdDistribucion(NULL);
		} else {
			$this->setIdDistribucion($v->getId());
		}

		$this->aDistribucion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Distribucion object, it will not be re-added.
		if ($v !== null) {
			$v->addHistorico($this);
		}

		return $this;
	}


	/**
	 * Get the associated Distribucion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Distribucion The associated Distribucion object.
	 * @throws     PropelException
	 */
	public function getDistribucion(PropelPDO $con = null)
	{
		if ($this->aDistribucion === null && ($this->id_distribucion !== null)) {
			$this->aDistribucion = DistribucionQuery::create()->findPk($this->id_distribucion, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aDistribucion->addHistoricos($this);
			 */
		}
		return $this->aDistribucion;
	}

	/**
	 * Declares an association between this object and a Venta object.
	 *
	 * @param      Venta $v
	 * @return     Historico The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setVenta(Venta $v = null)
	{
		if ($v === null) {
			$this->setIdVenta(NULL);
		} else {
			$this->setIdVenta($v->getId());
		}

		$this->aVenta = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Venta object, it will not be re-added.
		if ($v !== null) {
			$v->addHistorico($this);
		}

		return $this;
	}


	/**
	 * Get the associated Venta object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Venta The associated Venta object.
	 * @throws     PropelException
	 */
	public function getVenta(PropelPDO $con = null)
	{
		if ($this->aVenta === null && ($this->id_venta !== null)) {
			$this->aVenta = VentaQuery::create()->findPk($this->id_venta, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aVenta->addHistoricos($this);
			 */
		}
		return $this->aVenta;
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->id_edicion = null;
		$this->id_status = null;
		$this->id_institucion = null;
		$this->fecha_inicio = null;
		$this->fecha_fin = null;
		$this->status_actual = null;
		$this->id_impresion = null;
		$this->id_distribucion = null;
		$this->id_venta = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

		$this->aEdicion = null;
		$this->aStatus = null;
		$this->aInstitucion = null;
		$this->aImpresion = null;
		$this->aDistribucion = null;
		$this->aVenta = null;
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseHistorico:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BaseHistorico
