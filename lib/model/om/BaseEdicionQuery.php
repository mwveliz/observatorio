<?php


/**
 * Base class that represents a query for the 'edicion' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Thu Feb 20 13:36:21 2014
 *
 * @method     EdicionQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     EdicionQuery orderByTraduccion($order = Criteria::ASC) Order by the traduccion column
 * @method     EdicionQuery orderByLenguaOrigen($order = Criteria::ASC) Order by the lengua_origen column
 * @method     EdicionQuery orderByLenguaTraducir($order = Criteria::ASC) Order by the lengua_traducir column
 * @method     EdicionQuery orderByTraductor($order = Criteria::ASC) Order by the traductor column
 * @method     EdicionQuery orderByNumeroReimpresion($order = Criteria::ASC) Order by the numero_reimpresion column
 * @method     EdicionQuery orderByCoedicion($order = Criteria::ASC) Order by the coedicion column
 * @method     EdicionQuery orderByIdLibro($order = Criteria::ASC) Order by the id_libro column
 * @method     EdicionQuery orderByCorrector($order = Criteria::ASC) Order by the corrector column
 * @method     EdicionQuery orderByColeccion($order = Criteria::ASC) Order by the coleccion column
 * @method     EdicionQuery orderByIsbn($order = Criteria::ASC) Order by the isbn column
 * @method     EdicionQuery orderByDepositoLegal($order = Criteria::ASC) Order by the deposito_legal column
 * @method     EdicionQuery orderByDiagramador($order = Criteria::ASC) Order by the diagramador column
 *
 * @method     EdicionQuery groupById() Group by the id column
 * @method     EdicionQuery groupByTraduccion() Group by the traduccion column
 * @method     EdicionQuery groupByLenguaOrigen() Group by the lengua_origen column
 * @method     EdicionQuery groupByLenguaTraducir() Group by the lengua_traducir column
 * @method     EdicionQuery groupByTraductor() Group by the traductor column
 * @method     EdicionQuery groupByNumeroReimpresion() Group by the numero_reimpresion column
 * @method     EdicionQuery groupByCoedicion() Group by the coedicion column
 * @method     EdicionQuery groupByIdLibro() Group by the id_libro column
 * @method     EdicionQuery groupByCorrector() Group by the corrector column
 * @method     EdicionQuery groupByColeccion() Group by the coleccion column
 * @method     EdicionQuery groupByIsbn() Group by the isbn column
 * @method     EdicionQuery groupByDepositoLegal() Group by the deposito_legal column
 * @method     EdicionQuery groupByDiagramador() Group by the diagramador column
 *
 * @method     EdicionQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     EdicionQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     EdicionQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     EdicionQuery leftJoinDistribucion($relationAlias = null) Adds a LEFT JOIN clause to the query using the Distribucion relation
 * @method     EdicionQuery rightJoinDistribucion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Distribucion relation
 * @method     EdicionQuery innerJoinDistribucion($relationAlias = null) Adds a INNER JOIN clause to the query using the Distribucion relation
 *
 * @method     EdicionQuery leftJoinHistorico($relationAlias = null) Adds a LEFT JOIN clause to the query using the Historico relation
 * @method     EdicionQuery rightJoinHistorico($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Historico relation
 * @method     EdicionQuery innerJoinHistorico($relationAlias = null) Adds a INNER JOIN clause to the query using the Historico relation
 *
 * @method     EdicionQuery leftJoinImpresion($relationAlias = null) Adds a LEFT JOIN clause to the query using the Impresion relation
 * @method     EdicionQuery rightJoinImpresion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Impresion relation
 * @method     EdicionQuery innerJoinImpresion($relationAlias = null) Adds a INNER JOIN clause to the query using the Impresion relation
 *
 * @method     EdicionQuery leftJoinVenta($relationAlias = null) Adds a LEFT JOIN clause to the query using the Venta relation
 * @method     EdicionQuery rightJoinVenta($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Venta relation
 * @method     EdicionQuery innerJoinVenta($relationAlias = null) Adds a INNER JOIN clause to the query using the Venta relation
 *
 * @method     Edicion findOne(PropelPDO $con = null) Return the first Edicion matching the query
 * @method     Edicion findOneOrCreate(PropelPDO $con = null) Return the first Edicion matching the query, or a new Edicion object populated from the query conditions when no match is found
 *
 * @method     Edicion findOneById(string $id) Return the first Edicion filtered by the id column
 * @method     Edicion findOneByTraduccion(string $traduccion) Return the first Edicion filtered by the traduccion column
 * @method     Edicion findOneByLenguaOrigen(string $lengua_origen) Return the first Edicion filtered by the lengua_origen column
 * @method     Edicion findOneByLenguaTraducir(string $lengua_traducir) Return the first Edicion filtered by the lengua_traducir column
 * @method     Edicion findOneByTraductor(string $traductor) Return the first Edicion filtered by the traductor column
 * @method     Edicion findOneByNumeroReimpresion(boolean $numero_reimpresion) Return the first Edicion filtered by the numero_reimpresion column
 * @method     Edicion findOneByCoedicion(int $coedicion) Return the first Edicion filtered by the coedicion column
 * @method     Edicion findOneByIdLibro(int $id_libro) Return the first Edicion filtered by the id_libro column
 * @method     Edicion findOneByCorrector(string $corrector) Return the first Edicion filtered by the corrector column
 * @method     Edicion findOneByColeccion(string $coleccion) Return the first Edicion filtered by the coleccion column
 * @method     Edicion findOneByIsbn(string $isbn) Return the first Edicion filtered by the isbn column
 * @method     Edicion findOneByDepositoLegal(string $deposito_legal) Return the first Edicion filtered by the deposito_legal column
 * @method     Edicion findOneByDiagramador(string $diagramador) Return the first Edicion filtered by the diagramador column
 *
 * @method     array findById(string $id) Return Edicion objects filtered by the id column
 * @method     array findByTraduccion(string $traduccion) Return Edicion objects filtered by the traduccion column
 * @method     array findByLenguaOrigen(string $lengua_origen) Return Edicion objects filtered by the lengua_origen column
 * @method     array findByLenguaTraducir(string $lengua_traducir) Return Edicion objects filtered by the lengua_traducir column
 * @method     array findByTraductor(string $traductor) Return Edicion objects filtered by the traductor column
 * @method     array findByNumeroReimpresion(boolean $numero_reimpresion) Return Edicion objects filtered by the numero_reimpresion column
 * @method     array findByCoedicion(int $coedicion) Return Edicion objects filtered by the coedicion column
 * @method     array findByIdLibro(int $id_libro) Return Edicion objects filtered by the id_libro column
 * @method     array findByCorrector(string $corrector) Return Edicion objects filtered by the corrector column
 * @method     array findByColeccion(string $coleccion) Return Edicion objects filtered by the coleccion column
 * @method     array findByIsbn(string $isbn) Return Edicion objects filtered by the isbn column
 * @method     array findByDepositoLegal(string $deposito_legal) Return Edicion objects filtered by the deposito_legal column
 * @method     array findByDiagramador(string $diagramador) Return Edicion objects filtered by the diagramador column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseEdicionQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseEdicionQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Edicion', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new EdicionQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    EdicionQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof EdicionQuery) {
			return $criteria;
		}
		$query = new EdicionQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Edicion|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = EdicionPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(EdicionPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(EdicionPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     string|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(EdicionPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the traduccion column
	 * 
	 * @param     string $traduccion The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByTraduccion($traduccion = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($traduccion)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $traduccion)) {
				$traduccion = str_replace('*', '%', $traduccion);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(EdicionPeer::TRADUCCION, $traduccion, $comparison);
	}

	/**
	 * Filter the query on the lengua_origen column
	 * 
	 * @param     string $lenguaOrigen The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByLenguaOrigen($lenguaOrigen = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($lenguaOrigen)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $lenguaOrigen)) {
				$lenguaOrigen = str_replace('*', '%', $lenguaOrigen);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(EdicionPeer::LENGUA_ORIGEN, $lenguaOrigen, $comparison);
	}

	/**
	 * Filter the query on the lengua_traducir column
	 * 
	 * @param     string $lenguaTraducir The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByLenguaTraducir($lenguaTraducir = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($lenguaTraducir)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $lenguaTraducir)) {
				$lenguaTraducir = str_replace('*', '%', $lenguaTraducir);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(EdicionPeer::LENGUA_TRADUCIR, $lenguaTraducir, $comparison);
	}

	/**
	 * Filter the query on the traductor column
	 * 
	 * @param     string $traductor The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByTraductor($traductor = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($traductor)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $traductor)) {
				$traductor = str_replace('*', '%', $traductor);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(EdicionPeer::TRADUCTOR, $traductor, $comparison);
	}

	/**
	 * Filter the query on the numero_reimpresion column
	 * 
	 * @param     boolean|string $numeroReimpresion The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByNumeroReimpresion($numeroReimpresion = null, $comparison = null)
	{
		if (is_string($numeroReimpresion)) {
			$numero_reimpresion = in_array(strtolower($numeroReimpresion), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(EdicionPeer::NUMERO_REIMPRESION, $numeroReimpresion, $comparison);
	}

	/**
	 * Filter the query on the coedicion column
	 * 
	 * @param     int|array $coedicion The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByCoedicion($coedicion = null, $comparison = null)
	{
		if (is_array($coedicion)) {
			$useMinMax = false;
			if (isset($coedicion['min'])) {
				$this->addUsingAlias(EdicionPeer::COEDICION, $coedicion['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($coedicion['max'])) {
				$this->addUsingAlias(EdicionPeer::COEDICION, $coedicion['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(EdicionPeer::COEDICION, $coedicion, $comparison);
	}

	/**
	 * Filter the query on the id_libro column
	 * 
	 * @param     int|array $idLibro The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByIdLibro($idLibro = null, $comparison = null)
	{
		if (is_array($idLibro)) {
			$useMinMax = false;
			if (isset($idLibro['min'])) {
				$this->addUsingAlias(EdicionPeer::ID_LIBRO, $idLibro['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idLibro['max'])) {
				$this->addUsingAlias(EdicionPeer::ID_LIBRO, $idLibro['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(EdicionPeer::ID_LIBRO, $idLibro, $comparison);
	}

	/**
	 * Filter the query on the corrector column
	 * 
	 * @param     string $corrector The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByCorrector($corrector = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($corrector)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $corrector)) {
				$corrector = str_replace('*', '%', $corrector);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(EdicionPeer::CORRECTOR, $corrector, $comparison);
	}

	/**
	 * Filter the query on the coleccion column
	 * 
	 * @param     string $coleccion The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByColeccion($coleccion = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($coleccion)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $coleccion)) {
				$coleccion = str_replace('*', '%', $coleccion);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(EdicionPeer::COLECCION, $coleccion, $comparison);
	}

	/**
	 * Filter the query on the isbn column
	 * 
	 * @param     string $isbn The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByIsbn($isbn = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($isbn)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $isbn)) {
				$isbn = str_replace('*', '%', $isbn);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(EdicionPeer::ISBN, $isbn, $comparison);
	}

	/**
	 * Filter the query on the deposito_legal column
	 * 
	 * @param     string $depositoLegal The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByDepositoLegal($depositoLegal = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($depositoLegal)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $depositoLegal)) {
				$depositoLegal = str_replace('*', '%', $depositoLegal);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(EdicionPeer::DEPOSITO_LEGAL, $depositoLegal, $comparison);
	}

	/**
	 * Filter the query on the diagramador column
	 * 
	 * @param     string $diagramador The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByDiagramador($diagramador = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($diagramador)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $diagramador)) {
				$diagramador = str_replace('*', '%', $diagramador);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(EdicionPeer::DIAGRAMADOR, $diagramador, $comparison);
	}

	/**
	 * Filter the query by a related Distribucion object
	 *
	 * @param     Distribucion $distribucion  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByDistribucion($distribucion, $comparison = null)
	{
		return $this
			->addUsingAlias(EdicionPeer::ID, $distribucion->getIdEdicion(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Distribucion relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function joinDistribucion($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Distribucion');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Distribucion');
		}
		
		return $this;
	}

	/**
	 * Use the Distribucion relation Distribucion object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    DistribucionQuery A secondary query class using the current class as primary query
	 */
	public function useDistribucionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinDistribucion($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Distribucion', 'DistribucionQuery');
	}

	/**
	 * Filter the query by a related Historico object
	 *
	 * @param     Historico $historico  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByHistorico($historico, $comparison = null)
	{
		return $this
			->addUsingAlias(EdicionPeer::ID, $historico->getIdEdicion(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Historico relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function joinHistorico($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Historico');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Historico');
		}
		
		return $this;
	}

	/**
	 * Use the Historico relation Historico object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    HistoricoQuery A secondary query class using the current class as primary query
	 */
	public function useHistoricoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinHistorico($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Historico', 'HistoricoQuery');
	}

	/**
	 * Filter the query by a related Impresion object
	 *
	 * @param     Impresion $impresion  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByImpresion($impresion, $comparison = null)
	{
		return $this
			->addUsingAlias(EdicionPeer::ID, $impresion->getIdEdicion(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Impresion relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function joinImpresion($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Impresion');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Impresion');
		}
		
		return $this;
	}

	/**
	 * Use the Impresion relation Impresion object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ImpresionQuery A secondary query class using the current class as primary query
	 */
	public function useImpresionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinImpresion($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Impresion', 'ImpresionQuery');
	}

	/**
	 * Filter the query by a related Venta object
	 *
	 * @param     Venta $venta  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function filterByVenta($venta, $comparison = null)
	{
		return $this
			->addUsingAlias(EdicionPeer::ID, $venta->getIdEdicion(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Venta relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function joinVenta($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Venta');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Venta');
		}
		
		return $this;
	}

	/**
	 * Use the Venta relation Venta object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    VentaQuery A secondary query class using the current class as primary query
	 */
	public function useVentaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinVenta($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Venta', 'VentaQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Edicion $edicion Object to remove from the list of results
	 *
	 * @return    EdicionQuery The current query, for fluid interface
	 */
	public function prune($edicion = null)
	{
		if ($edicion) {
			$this->addUsingAlias(EdicionPeer::ID, $edicion->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseEdicionQuery
