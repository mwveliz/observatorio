<?php


/**
 * Base class that represents a query for the 'institucion' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Thu Feb 20 13:36:21 2014
 *
 * @method     InstitucionQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     InstitucionQuery orderByNombre($order = Criteria::ASC) Order by the nombre column
 * @method     InstitucionQuery orderByCorreo($order = Criteria::ASC) Order by the correo column
 * @method     InstitucionQuery orderByRif($order = Criteria::ASC) Order by the rif column
 * @method     InstitucionQuery orderByUbicacion($order = Criteria::ASC) Order by the ubicacion column
 * @method     InstitucionQuery orderByIdTipoinstitucion($order = Criteria::ASC) Order by the id_tipoinstitucion column
 * @method     InstitucionQuery orderBySector($order = Criteria::ASC) Order by the sector column
 * @method     InstitucionQuery orderByResponsable($order = Criteria::ASC) Order by the responsable column
 * @method     InstitucionQuery orderByPublica($order = Criteria::ASC) Order by the publica column
 * @method     InstitucionQuery orderByIdPais($order = Criteria::ASC) Order by the id_pais column
 * @method     InstitucionQuery orderByIdMunicipio($order = Criteria::ASC) Order by the id_municipio column
 * @method     InstitucionQuery orderByIdParroquia($order = Criteria::ASC) Order by the id_parroquia column
 *
 * @method     InstitucionQuery groupById() Group by the id column
 * @method     InstitucionQuery groupByNombre() Group by the nombre column
 * @method     InstitucionQuery groupByCorreo() Group by the correo column
 * @method     InstitucionQuery groupByRif() Group by the rif column
 * @method     InstitucionQuery groupByUbicacion() Group by the ubicacion column
 * @method     InstitucionQuery groupByIdTipoinstitucion() Group by the id_tipoinstitucion column
 * @method     InstitucionQuery groupBySector() Group by the sector column
 * @method     InstitucionQuery groupByResponsable() Group by the responsable column
 * @method     InstitucionQuery groupByPublica() Group by the publica column
 * @method     InstitucionQuery groupByIdPais() Group by the id_pais column
 * @method     InstitucionQuery groupByIdMunicipio() Group by the id_municipio column
 * @method     InstitucionQuery groupByIdParroquia() Group by the id_parroquia column
 *
 * @method     InstitucionQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     InstitucionQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     InstitucionQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     InstitucionQuery leftJoinTipoinstitucion($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tipoinstitucion relation
 * @method     InstitucionQuery rightJoinTipoinstitucion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tipoinstitucion relation
 * @method     InstitucionQuery innerJoinTipoinstitucion($relationAlias = null) Adds a INNER JOIN clause to the query using the Tipoinstitucion relation
 *
 * @method     InstitucionQuery leftJoinPais($relationAlias = null) Adds a LEFT JOIN clause to the query using the Pais relation
 * @method     InstitucionQuery rightJoinPais($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Pais relation
 * @method     InstitucionQuery innerJoinPais($relationAlias = null) Adds a INNER JOIN clause to the query using the Pais relation
 *
 * @method     InstitucionQuery leftJoinMunicipio($relationAlias = null) Adds a LEFT JOIN clause to the query using the Municipio relation
 * @method     InstitucionQuery rightJoinMunicipio($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Municipio relation
 * @method     InstitucionQuery innerJoinMunicipio($relationAlias = null) Adds a INNER JOIN clause to the query using the Municipio relation
 *
 * @method     InstitucionQuery leftJoinParroquia($relationAlias = null) Adds a LEFT JOIN clause to the query using the Parroquia relation
 * @method     InstitucionQuery rightJoinParroquia($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Parroquia relation
 * @method     InstitucionQuery innerJoinParroquia($relationAlias = null) Adds a INNER JOIN clause to the query using the Parroquia relation
 *
 * @method     InstitucionQuery leftJoinHistorico($relationAlias = null) Adds a LEFT JOIN clause to the query using the Historico relation
 * @method     InstitucionQuery rightJoinHistorico($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Historico relation
 * @method     InstitucionQuery innerJoinHistorico($relationAlias = null) Adds a INNER JOIN clause to the query using the Historico relation
 *
 * @method     Institucion findOne(PropelPDO $con = null) Return the first Institucion matching the query
 * @method     Institucion findOneOrCreate(PropelPDO $con = null) Return the first Institucion matching the query, or a new Institucion object populated from the query conditions when no match is found
 *
 * @method     Institucion findOneById(string $id) Return the first Institucion filtered by the id column
 * @method     Institucion findOneByNombre(string $nombre) Return the first Institucion filtered by the nombre column
 * @method     Institucion findOneByCorreo(string $correo) Return the first Institucion filtered by the correo column
 * @method     Institucion findOneByRif(string $rif) Return the first Institucion filtered by the rif column
 * @method     Institucion findOneByUbicacion(string $ubicacion) Return the first Institucion filtered by the ubicacion column
 * @method     Institucion findOneByIdTipoinstitucion(int $id_tipoinstitucion) Return the first Institucion filtered by the id_tipoinstitucion column
 * @method     Institucion findOneBySector(string $sector) Return the first Institucion filtered by the sector column
 * @method     Institucion findOneByResponsable(string $responsable) Return the first Institucion filtered by the responsable column
 * @method     Institucion findOneByPublica(boolean $publica) Return the first Institucion filtered by the publica column
 * @method     Institucion findOneByIdPais(int $id_pais) Return the first Institucion filtered by the id_pais column
 * @method     Institucion findOneByIdMunicipio(int $id_municipio) Return the first Institucion filtered by the id_municipio column
 * @method     Institucion findOneByIdParroquia(int $id_parroquia) Return the first Institucion filtered by the id_parroquia column
 *
 * @method     array findById(string $id) Return Institucion objects filtered by the id column
 * @method     array findByNombre(string $nombre) Return Institucion objects filtered by the nombre column
 * @method     array findByCorreo(string $correo) Return Institucion objects filtered by the correo column
 * @method     array findByRif(string $rif) Return Institucion objects filtered by the rif column
 * @method     array findByUbicacion(string $ubicacion) Return Institucion objects filtered by the ubicacion column
 * @method     array findByIdTipoinstitucion(int $id_tipoinstitucion) Return Institucion objects filtered by the id_tipoinstitucion column
 * @method     array findBySector(string $sector) Return Institucion objects filtered by the sector column
 * @method     array findByResponsable(string $responsable) Return Institucion objects filtered by the responsable column
 * @method     array findByPublica(boolean $publica) Return Institucion objects filtered by the publica column
 * @method     array findByIdPais(int $id_pais) Return Institucion objects filtered by the id_pais column
 * @method     array findByIdMunicipio(int $id_municipio) Return Institucion objects filtered by the id_municipio column
 * @method     array findByIdParroquia(int $id_parroquia) Return Institucion objects filtered by the id_parroquia column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseInstitucionQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseInstitucionQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Institucion', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new InstitucionQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    InstitucionQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof InstitucionQuery) {
			return $criteria;
		}
		$query = new InstitucionQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Institucion|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = InstitucionPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(InstitucionPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(InstitucionPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     string|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(InstitucionPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the nombre column
	 * 
	 * @param     string $nombre The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByNombre($nombre = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombre)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombre)) {
				$nombre = str_replace('*', '%', $nombre);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(InstitucionPeer::NOMBRE, $nombre, $comparison);
	}

	/**
	 * Filter the query on the correo column
	 * 
	 * @param     string $correo The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByCorreo($correo = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($correo)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $correo)) {
				$correo = str_replace('*', '%', $correo);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(InstitucionPeer::CORREO, $correo, $comparison);
	}

	/**
	 * Filter the query on the rif column
	 * 
	 * @param     string $rif The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByRif($rif = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($rif)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $rif)) {
				$rif = str_replace('*', '%', $rif);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(InstitucionPeer::RIF, $rif, $comparison);
	}

	/**
	 * Filter the query on the ubicacion column
	 * 
	 * @param     string $ubicacion The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByUbicacion($ubicacion = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($ubicacion)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $ubicacion)) {
				$ubicacion = str_replace('*', '%', $ubicacion);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(InstitucionPeer::UBICACION, $ubicacion, $comparison);
	}

	/**
	 * Filter the query on the id_tipoinstitucion column
	 * 
	 * @param     int|array $idTipoinstitucion The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByIdTipoinstitucion($idTipoinstitucion = null, $comparison = null)
	{
		if (is_array($idTipoinstitucion)) {
			$useMinMax = false;
			if (isset($idTipoinstitucion['min'])) {
				$this->addUsingAlias(InstitucionPeer::ID_TIPOINSTITUCION, $idTipoinstitucion['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idTipoinstitucion['max'])) {
				$this->addUsingAlias(InstitucionPeer::ID_TIPOINSTITUCION, $idTipoinstitucion['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(InstitucionPeer::ID_TIPOINSTITUCION, $idTipoinstitucion, $comparison);
	}

	/**
	 * Filter the query on the sector column
	 * 
	 * @param     string $sector The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterBySector($sector = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($sector)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $sector)) {
				$sector = str_replace('*', '%', $sector);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(InstitucionPeer::SECTOR, $sector, $comparison);
	}

	/**
	 * Filter the query on the responsable column
	 * 
	 * @param     string $responsable The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByResponsable($responsable = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($responsable)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $responsable)) {
				$responsable = str_replace('*', '%', $responsable);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(InstitucionPeer::RESPONSABLE, $responsable, $comparison);
	}

	/**
	 * Filter the query on the publica column
	 * 
	 * @param     boolean|string $publica The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByPublica($publica = null, $comparison = null)
	{
		if (is_string($publica)) {
			$publica = in_array(strtolower($publica), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(InstitucionPeer::PUBLICA, $publica, $comparison);
	}

	/**
	 * Filter the query on the id_pais column
	 * 
	 * @param     int|array $idPais The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByIdPais($idPais = null, $comparison = null)
	{
		if (is_array($idPais)) {
			$useMinMax = false;
			if (isset($idPais['min'])) {
				$this->addUsingAlias(InstitucionPeer::ID_PAIS, $idPais['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idPais['max'])) {
				$this->addUsingAlias(InstitucionPeer::ID_PAIS, $idPais['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(InstitucionPeer::ID_PAIS, $idPais, $comparison);
	}

	/**
	 * Filter the query on the id_municipio column
	 * 
	 * @param     int|array $idMunicipio The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByIdMunicipio($idMunicipio = null, $comparison = null)
	{
		if (is_array($idMunicipio)) {
			$useMinMax = false;
			if (isset($idMunicipio['min'])) {
				$this->addUsingAlias(InstitucionPeer::ID_MUNICIPIO, $idMunicipio['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idMunicipio['max'])) {
				$this->addUsingAlias(InstitucionPeer::ID_MUNICIPIO, $idMunicipio['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(InstitucionPeer::ID_MUNICIPIO, $idMunicipio, $comparison);
	}

	/**
	 * Filter the query on the id_parroquia column
	 * 
	 * @param     int|array $idParroquia The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByIdParroquia($idParroquia = null, $comparison = null)
	{
		if (is_array($idParroquia)) {
			$useMinMax = false;
			if (isset($idParroquia['min'])) {
				$this->addUsingAlias(InstitucionPeer::ID_PARROQUIA, $idParroquia['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idParroquia['max'])) {
				$this->addUsingAlias(InstitucionPeer::ID_PARROQUIA, $idParroquia['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(InstitucionPeer::ID_PARROQUIA, $idParroquia, $comparison);
	}

	/**
	 * Filter the query by a related Tipoinstitucion object
	 *
	 * @param     Tipoinstitucion $tipoinstitucion  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByTipoinstitucion($tipoinstitucion, $comparison = null)
	{
		return $this
			->addUsingAlias(InstitucionPeer::ID_TIPOINSTITUCION, $tipoinstitucion->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Tipoinstitucion relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function joinTipoinstitucion($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Tipoinstitucion');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Tipoinstitucion');
		}
		
		return $this;
	}

	/**
	 * Use the Tipoinstitucion relation Tipoinstitucion object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipoinstitucionQuery A secondary query class using the current class as primary query
	 */
	public function useTipoinstitucionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinTipoinstitucion($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Tipoinstitucion', 'TipoinstitucionQuery');
	}

	/**
	 * Filter the query by a related Pais object
	 *
	 * @param     Pais $pais  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByPais($pais, $comparison = null)
	{
		return $this
			->addUsingAlias(InstitucionPeer::ID_PAIS, $pais->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Pais relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function joinPais($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Pais');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Pais');
		}
		
		return $this;
	}

	/**
	 * Use the Pais relation Pais object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery A secondary query class using the current class as primary query
	 */
	public function usePaisQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPais($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Pais', 'PaisQuery');
	}

	/**
	 * Filter the query by a related Municipio object
	 *
	 * @param     Municipio $municipio  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByMunicipio($municipio, $comparison = null)
	{
		return $this
			->addUsingAlias(InstitucionPeer::ID_MUNICIPIO, $municipio->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Municipio relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function joinMunicipio($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Municipio');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Municipio');
		}
		
		return $this;
	}

	/**
	 * Use the Municipio relation Municipio object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    MunicipioQuery A secondary query class using the current class as primary query
	 */
	public function useMunicipioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinMunicipio($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Municipio', 'MunicipioQuery');
	}

	/**
	 * Filter the query by a related Parroquia object
	 *
	 * @param     Parroquia $parroquia  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByParroquia($parroquia, $comparison = null)
	{
		return $this
			->addUsingAlias(InstitucionPeer::ID_PARROQUIA, $parroquia->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Parroquia relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function joinParroquia($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Parroquia');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Parroquia');
		}
		
		return $this;
	}

	/**
	 * Use the Parroquia relation Parroquia object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ParroquiaQuery A secondary query class using the current class as primary query
	 */
	public function useParroquiaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinParroquia($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Parroquia', 'ParroquiaQuery');
	}

	/**
	 * Filter the query by a related Historico object
	 *
	 * @param     Historico $historico  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function filterByHistorico($historico, $comparison = null)
	{
		return $this
			->addUsingAlias(InstitucionPeer::ID, $historico->getIdInstitucion(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Historico relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function joinHistorico($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Historico');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Historico');
		}
		
		return $this;
	}

	/**
	 * Use the Historico relation Historico object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    HistoricoQuery A secondary query class using the current class as primary query
	 */
	public function useHistoricoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinHistorico($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Historico', 'HistoricoQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Institucion $institucion Object to remove from the list of results
	 *
	 * @return    InstitucionQuery The current query, for fluid interface
	 */
	public function prune($institucion = null)
	{
		if ($institucion) {
			$this->addUsingAlias(InstitucionPeer::ID, $institucion->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseInstitucionQuery
