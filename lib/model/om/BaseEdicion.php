<?php


/**
 * Base class that represents a row from the 'edicion' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Thu Feb 20 13:36:21 2014
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseEdicion extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'EdicionPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        EdicionPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the traduccion field.
	 * @var        string
	 */
	protected $traduccion;

	/**
	 * The value for the lengua_origen field.
	 * @var        string
	 */
	protected $lengua_origen;

	/**
	 * The value for the lengua_traducir field.
	 * @var        string
	 */
	protected $lengua_traducir;

	/**
	 * The value for the traductor field.
	 * @var        string
	 */
	protected $traductor;

	/**
	 * The value for the numero_reimpresion field.
	 * @var        boolean
	 */
	protected $numero_reimpresion;

	/**
	 * The value for the coedicion field.
	 * @var        int
	 */
	protected $coedicion;

	/**
	 * The value for the id_libro field.
	 * @var        int
	 */
	protected $id_libro;

	/**
	 * The value for the corrector field.
	 * @var        string
	 */
	protected $corrector;

	/**
	 * The value for the coleccion field.
	 * @var        string
	 */
	protected $coleccion;

	/**
	 * The value for the isbn field.
	 * @var        string
	 */
	protected $isbn;

	/**
	 * The value for the deposito_legal field.
	 * @var        string
	 */
	protected $deposito_legal;

	/**
	 * The value for the diagramador field.
	 * @var        string
	 */
	protected $diagramador;

	/**
	 * @var        array Distribucion[] Collection to store aggregation of Distribucion objects.
	 */
	protected $collDistribucions;

	/**
	 * @var        array Historico[] Collection to store aggregation of Historico objects.
	 */
	protected $collHistoricos;

	/**
	 * @var        array Impresion[] Collection to store aggregation of Impresion objects.
	 */
	protected $collImpresions;

	/**
	 * @var        array Venta[] Collection to store aggregation of Venta objects.
	 */
	protected $collVentas;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [traduccion] column value.
	 * 
	 * @return     string
	 */
	public function getTraduccion()
	{
		return $this->traduccion;
	}

	/**
	 * Get the [lengua_origen] column value.
	 * 
	 * @return     string
	 */
	public function getLenguaOrigen()
	{
		return $this->lengua_origen;
	}

	/**
	 * Get the [lengua_traducir] column value.
	 * 
	 * @return     string
	 */
	public function getLenguaTraducir()
	{
		return $this->lengua_traducir;
	}

	/**
	 * Get the [traductor] column value.
	 * 
	 * @return     string
	 */
	public function getTraductor()
	{
		return $this->traductor;
	}

	/**
	 * Get the [numero_reimpresion] column value.
	 * 
	 * @return     boolean
	 */
	public function getNumeroReimpresion()
	{
		return $this->numero_reimpresion;
	}

	/**
	 * Get the [coedicion] column value.
	 * 
	 * @return     int
	 */
	public function getCoedicion()
	{
		return $this->coedicion;
	}

	/**
	 * Get the [id_libro] column value.
	 * 
	 * @return     int
	 */
	public function getIdLibro()
	{
		return $this->id_libro;
	}

	/**
	 * Get the [corrector] column value.
	 * 
	 * @return     string
	 */
	public function getCorrector()
	{
		return $this->corrector;
	}

	/**
	 * Get the [coleccion] column value.
	 * 
	 * @return     string
	 */
	public function getColeccion()
	{
		return $this->coleccion;
	}

	/**
	 * Get the [isbn] column value.
	 * 
	 * @return     string
	 */
	public function getIsbn()
	{
		return $this->isbn;
	}

	/**
	 * Get the [deposito_legal] column value.
	 * 
	 * @return     string
	 */
	public function getDepositoLegal()
	{
		return $this->deposito_legal;
	}

	/**
	 * Get the [diagramador] column value.
	 * 
	 * @return     string
	 */
	public function getDiagramador()
	{
		return $this->diagramador;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = EdicionPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [traduccion] column.
	 * 
	 * @param      string $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setTraduccion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->traduccion !== $v) {
			$this->traduccion = $v;
			$this->modifiedColumns[] = EdicionPeer::TRADUCCION;
		}

		return $this;
	} // setTraduccion()

	/**
	 * Set the value of [lengua_origen] column.
	 * 
	 * @param      string $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setLenguaOrigen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lengua_origen !== $v) {
			$this->lengua_origen = $v;
			$this->modifiedColumns[] = EdicionPeer::LENGUA_ORIGEN;
		}

		return $this;
	} // setLenguaOrigen()

	/**
	 * Set the value of [lengua_traducir] column.
	 * 
	 * @param      string $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setLenguaTraducir($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lengua_traducir !== $v) {
			$this->lengua_traducir = $v;
			$this->modifiedColumns[] = EdicionPeer::LENGUA_TRADUCIR;
		}

		return $this;
	} // setLenguaTraducir()

	/**
	 * Set the value of [traductor] column.
	 * 
	 * @param      string $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setTraductor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->traductor !== $v) {
			$this->traductor = $v;
			$this->modifiedColumns[] = EdicionPeer::TRADUCTOR;
		}

		return $this;
	} // setTraductor()

	/**
	 * Set the value of [numero_reimpresion] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setNumeroReimpresion($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->numero_reimpresion !== $v) {
			$this->numero_reimpresion = $v;
			$this->modifiedColumns[] = EdicionPeer::NUMERO_REIMPRESION;
		}

		return $this;
	} // setNumeroReimpresion()

	/**
	 * Set the value of [coedicion] column.
	 * 
	 * @param      int $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setCoedicion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coedicion !== $v) {
			$this->coedicion = $v;
			$this->modifiedColumns[] = EdicionPeer::COEDICION;
		}

		return $this;
	} // setCoedicion()

	/**
	 * Set the value of [id_libro] column.
	 * 
	 * @param      int $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setIdLibro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_libro !== $v) {
			$this->id_libro = $v;
			$this->modifiedColumns[] = EdicionPeer::ID_LIBRO;
		}

		return $this;
	} // setIdLibro()

	/**
	 * Set the value of [corrector] column.
	 * 
	 * @param      string $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setCorrector($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->corrector !== $v) {
			$this->corrector = $v;
			$this->modifiedColumns[] = EdicionPeer::CORRECTOR;
		}

		return $this;
	} // setCorrector()

	/**
	 * Set the value of [coleccion] column.
	 * 
	 * @param      string $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setColeccion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->coleccion !== $v) {
			$this->coleccion = $v;
			$this->modifiedColumns[] = EdicionPeer::COLECCION;
		}

		return $this;
	} // setColeccion()

	/**
	 * Set the value of [isbn] column.
	 * 
	 * @param      string $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setIsbn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->isbn !== $v) {
			$this->isbn = $v;
			$this->modifiedColumns[] = EdicionPeer::ISBN;
		}

		return $this;
	} // setIsbn()

	/**
	 * Set the value of [deposito_legal] column.
	 * 
	 * @param      string $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setDepositoLegal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->deposito_legal !== $v) {
			$this->deposito_legal = $v;
			$this->modifiedColumns[] = EdicionPeer::DEPOSITO_LEGAL;
		}

		return $this;
	} // setDepositoLegal()

	/**
	 * Set the value of [diagramador] column.
	 * 
	 * @param      string $v new value
	 * @return     Edicion The current object (for fluent API support)
	 */
	public function setDiagramador($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->diagramador !== $v) {
			$this->diagramador = $v;
			$this->modifiedColumns[] = EdicionPeer::DIAGRAMADOR;
		}

		return $this;
	} // setDiagramador()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->traduccion = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->lengua_origen = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->lengua_traducir = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->traductor = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->numero_reimpresion = ($row[$startcol + 5] !== null) ? (boolean) $row[$startcol + 5] : null;
			$this->coedicion = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->id_libro = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->corrector = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->coleccion = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->isbn = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->deposito_legal = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->diagramador = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 13; // 13 = EdicionPeer::NUM_COLUMNS - EdicionPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Edicion object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EdicionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = EdicionPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collDistribucions = null;

			$this->collHistoricos = null;

			$this->collImpresions = null;

			$this->collVentas = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EdicionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseEdicion:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				EdicionQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseEdicion:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EdicionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseEdicion:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseEdicion:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				EdicionPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = EdicionPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(EdicionPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.EdicionPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows = 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows = EdicionPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collDistribucions !== null) {
				foreach ($this->collDistribucions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collHistoricos !== null) {
				foreach ($this->collHistoricos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collImpresions !== null) {
				foreach ($this->collImpresions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVentas !== null) {
				foreach ($this->collVentas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = EdicionPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collDistribucions !== null) {
					foreach ($this->collDistribucions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collHistoricos !== null) {
					foreach ($this->collHistoricos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collImpresions !== null) {
					foreach ($this->collImpresions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVentas !== null) {
					foreach ($this->collVentas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EdicionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getTraduccion();
				break;
			case 2:
				return $this->getLenguaOrigen();
				break;
			case 3:
				return $this->getLenguaTraducir();
				break;
			case 4:
				return $this->getTraductor();
				break;
			case 5:
				return $this->getNumeroReimpresion();
				break;
			case 6:
				return $this->getCoedicion();
				break;
			case 7:
				return $this->getIdLibro();
				break;
			case 8:
				return $this->getCorrector();
				break;
			case 9:
				return $this->getColeccion();
				break;
			case 10:
				return $this->getIsbn();
				break;
			case 11:
				return $this->getDepositoLegal();
				break;
			case 12:
				return $this->getDiagramador();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = EdicionPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getTraduccion(),
			$keys[2] => $this->getLenguaOrigen(),
			$keys[3] => $this->getLenguaTraducir(),
			$keys[4] => $this->getTraductor(),
			$keys[5] => $this->getNumeroReimpresion(),
			$keys[6] => $this->getCoedicion(),
			$keys[7] => $this->getIdLibro(),
			$keys[8] => $this->getCorrector(),
			$keys[9] => $this->getColeccion(),
			$keys[10] => $this->getIsbn(),
			$keys[11] => $this->getDepositoLegal(),
			$keys[12] => $this->getDiagramador(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EdicionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setTraduccion($value);
				break;
			case 2:
				$this->setLenguaOrigen($value);
				break;
			case 3:
				$this->setLenguaTraducir($value);
				break;
			case 4:
				$this->setTraductor($value);
				break;
			case 5:
				$this->setNumeroReimpresion($value);
				break;
			case 6:
				$this->setCoedicion($value);
				break;
			case 7:
				$this->setIdLibro($value);
				break;
			case 8:
				$this->setCorrector($value);
				break;
			case 9:
				$this->setColeccion($value);
				break;
			case 10:
				$this->setIsbn($value);
				break;
			case 11:
				$this->setDepositoLegal($value);
				break;
			case 12:
				$this->setDiagramador($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = EdicionPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTraduccion($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLenguaOrigen($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setLenguaTraducir($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setTraductor($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNumeroReimpresion($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCoedicion($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIdLibro($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCorrector($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setColeccion($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setIsbn($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDepositoLegal($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDiagramador($arr[$keys[12]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(EdicionPeer::DATABASE_NAME);

		if ($this->isColumnModified(EdicionPeer::ID)) $criteria->add(EdicionPeer::ID, $this->id);
		if ($this->isColumnModified(EdicionPeer::TRADUCCION)) $criteria->add(EdicionPeer::TRADUCCION, $this->traduccion);
		if ($this->isColumnModified(EdicionPeer::LENGUA_ORIGEN)) $criteria->add(EdicionPeer::LENGUA_ORIGEN, $this->lengua_origen);
		if ($this->isColumnModified(EdicionPeer::LENGUA_TRADUCIR)) $criteria->add(EdicionPeer::LENGUA_TRADUCIR, $this->lengua_traducir);
		if ($this->isColumnModified(EdicionPeer::TRADUCTOR)) $criteria->add(EdicionPeer::TRADUCTOR, $this->traductor);
		if ($this->isColumnModified(EdicionPeer::NUMERO_REIMPRESION)) $criteria->add(EdicionPeer::NUMERO_REIMPRESION, $this->numero_reimpresion);
		if ($this->isColumnModified(EdicionPeer::COEDICION)) $criteria->add(EdicionPeer::COEDICION, $this->coedicion);
		if ($this->isColumnModified(EdicionPeer::ID_LIBRO)) $criteria->add(EdicionPeer::ID_LIBRO, $this->id_libro);
		if ($this->isColumnModified(EdicionPeer::CORRECTOR)) $criteria->add(EdicionPeer::CORRECTOR, $this->corrector);
		if ($this->isColumnModified(EdicionPeer::COLECCION)) $criteria->add(EdicionPeer::COLECCION, $this->coleccion);
		if ($this->isColumnModified(EdicionPeer::ISBN)) $criteria->add(EdicionPeer::ISBN, $this->isbn);
		if ($this->isColumnModified(EdicionPeer::DEPOSITO_LEGAL)) $criteria->add(EdicionPeer::DEPOSITO_LEGAL, $this->deposito_legal);
		if ($this->isColumnModified(EdicionPeer::DIAGRAMADOR)) $criteria->add(EdicionPeer::DIAGRAMADOR, $this->diagramador);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(EdicionPeer::DATABASE_NAME);
		$criteria->add(EdicionPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Edicion (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{
		$copyObj->setTraduccion($this->traduccion);
		$copyObj->setLenguaOrigen($this->lengua_origen);
		$copyObj->setLenguaTraducir($this->lengua_traducir);
		$copyObj->setTraductor($this->traductor);
		$copyObj->setNumeroReimpresion($this->numero_reimpresion);
		$copyObj->setCoedicion($this->coedicion);
		$copyObj->setIdLibro($this->id_libro);
		$copyObj->setCorrector($this->corrector);
		$copyObj->setColeccion($this->coleccion);
		$copyObj->setIsbn($this->isbn);
		$copyObj->setDepositoLegal($this->deposito_legal);
		$copyObj->setDiagramador($this->diagramador);

		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getDistribucions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDistribucion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getHistoricos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addHistorico($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getImpresions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addImpresion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVentas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVenta($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);
		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Edicion Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     EdicionPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new EdicionPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collDistribucions collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDistribucions()
	 */
	public function clearDistribucions()
	{
		$this->collDistribucions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDistribucions collection.
	 *
	 * By default this just sets the collDistribucions collection to an empty array (like clearcollDistribucions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDistribucions()
	{
		$this->collDistribucions = new PropelObjectCollection();
		$this->collDistribucions->setModel('Distribucion');
	}

	/**
	 * Gets an array of Distribucion objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Edicion is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Distribucion[] List of Distribucion objects
	 * @throws     PropelException
	 */
	public function getDistribucions($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collDistribucions || null !== $criteria) {
			if ($this->isNew() && null === $this->collDistribucions) {
				// return empty collection
				$this->initDistribucions();
			} else {
				$collDistribucions = DistribucionQuery::create(null, $criteria)
					->filterByEdicion($this)
					->find($con);
				if (null !== $criteria) {
					return $collDistribucions;
				}
				$this->collDistribucions = $collDistribucions;
			}
		}
		return $this->collDistribucions;
	}

	/**
	 * Returns the number of related Distribucion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Distribucion objects.
	 * @throws     PropelException
	 */
	public function countDistribucions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collDistribucions || null !== $criteria) {
			if ($this->isNew() && null === $this->collDistribucions) {
				return 0;
			} else {
				$query = DistribucionQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByEdicion($this)
					->count($con);
			}
		} else {
			return count($this->collDistribucions);
		}
	}

	/**
	 * Method called to associate a Distribucion object to this object
	 * through the Distribucion foreign key attribute.
	 *
	 * @param      Distribucion $l Distribucion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDistribucion(Distribucion $l)
	{
		if ($this->collDistribucions === null) {
			$this->initDistribucions();
		}
		if (!$this->collDistribucions->contains($l)) { // only add it if the **same** object is not already associated
			$this->collDistribucions[]= $l;
			$l->setEdicion($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Distribucions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Distribucion[] List of Distribucion objects
	 */
	public function getDistribucionsJoinTipodestino($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = DistribucionQuery::create(null, $criteria);
		$query->joinWith('Tipodestino', $join_behavior);

		return $this->getDistribucions($query, $con);
	}

	/**
	 * Clears out the collHistoricos collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addHistoricos()
	 */
	public function clearHistoricos()
	{
		$this->collHistoricos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collHistoricos collection.
	 *
	 * By default this just sets the collHistoricos collection to an empty array (like clearcollHistoricos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initHistoricos()
	{
		$this->collHistoricos = new PropelObjectCollection();
		$this->collHistoricos->setModel('Historico');
	}

	/**
	 * Gets an array of Historico objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Edicion is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Historico[] List of Historico objects
	 * @throws     PropelException
	 */
	public function getHistoricos($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collHistoricos || null !== $criteria) {
			if ($this->isNew() && null === $this->collHistoricos) {
				// return empty collection
				$this->initHistoricos();
			} else {
				$collHistoricos = HistoricoQuery::create(null, $criteria)
					->filterByEdicion($this)
					->find($con);
				if (null !== $criteria) {
					return $collHistoricos;
				}
				$this->collHistoricos = $collHistoricos;
			}
		}
		return $this->collHistoricos;
	}

	/**
	 * Returns the number of related Historico objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Historico objects.
	 * @throws     PropelException
	 */
	public function countHistoricos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collHistoricos || null !== $criteria) {
			if ($this->isNew() && null === $this->collHistoricos) {
				return 0;
			} else {
				$query = HistoricoQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByEdicion($this)
					->count($con);
			}
		} else {
			return count($this->collHistoricos);
		}
	}

	/**
	 * Method called to associate a Historico object to this object
	 * through the Historico foreign key attribute.
	 *
	 * @param      Historico $l Historico
	 * @return     void
	 * @throws     PropelException
	 */
	public function addHistorico(Historico $l)
	{
		if ($this->collHistoricos === null) {
			$this->initHistoricos();
		}
		if (!$this->collHistoricos->contains($l)) { // only add it if the **same** object is not already associated
			$this->collHistoricos[]= $l;
			$l->setEdicion($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Historicos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Historico[] List of Historico objects
	 */
	public function getHistoricosJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = HistoricoQuery::create(null, $criteria);
		$query->joinWith('Status', $join_behavior);

		return $this->getHistoricos($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Historicos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Historico[] List of Historico objects
	 */
	public function getHistoricosJoinInstitucion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = HistoricoQuery::create(null, $criteria);
		$query->joinWith('Institucion', $join_behavior);

		return $this->getHistoricos($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Historicos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Historico[] List of Historico objects
	 */
	public function getHistoricosJoinImpresion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = HistoricoQuery::create(null, $criteria);
		$query->joinWith('Impresion', $join_behavior);

		return $this->getHistoricos($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Historicos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Historico[] List of Historico objects
	 */
	public function getHistoricosJoinDistribucion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = HistoricoQuery::create(null, $criteria);
		$query->joinWith('Distribucion', $join_behavior);

		return $this->getHistoricos($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Historicos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Historico[] List of Historico objects
	 */
	public function getHistoricosJoinVenta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = HistoricoQuery::create(null, $criteria);
		$query->joinWith('Venta', $join_behavior);

		return $this->getHistoricos($query, $con);
	}

	/**
	 * Clears out the collImpresions collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addImpresions()
	 */
	public function clearImpresions()
	{
		$this->collImpresions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collImpresions collection.
	 *
	 * By default this just sets the collImpresions collection to an empty array (like clearcollImpresions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initImpresions()
	{
		$this->collImpresions = new PropelObjectCollection();
		$this->collImpresions->setModel('Impresion');
	}

	/**
	 * Gets an array of Impresion objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Edicion is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Impresion[] List of Impresion objects
	 * @throws     PropelException
	 */
	public function getImpresions($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collImpresions || null !== $criteria) {
			if ($this->isNew() && null === $this->collImpresions) {
				// return empty collection
				$this->initImpresions();
			} else {
				$collImpresions = ImpresionQuery::create(null, $criteria)
					->filterByEdicion($this)
					->find($con);
				if (null !== $criteria) {
					return $collImpresions;
				}
				$this->collImpresions = $collImpresions;
			}
		}
		return $this->collImpresions;
	}

	/**
	 * Returns the number of related Impresion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Impresion objects.
	 * @throws     PropelException
	 */
	public function countImpresions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collImpresions || null !== $criteria) {
			if ($this->isNew() && null === $this->collImpresions) {
				return 0;
			} else {
				$query = ImpresionQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByEdicion($this)
					->count($con);
			}
		} else {
			return count($this->collImpresions);
		}
	}

	/**
	 * Method called to associate a Impresion object to this object
	 * through the Impresion foreign key attribute.
	 *
	 * @param      Impresion $l Impresion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addImpresion(Impresion $l)
	{
		if ($this->collImpresions === null) {
			$this->initImpresions();
		}
		if (!$this->collImpresions->contains($l)) { // only add it if the **same** object is not already associated
			$this->collImpresions[]= $l;
			$l->setEdicion($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Impresions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Impresion[] List of Impresion objects
	 */
	public function getImpresionsJoinTipocaratula($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ImpresionQuery::create(null, $criteria);
		$query->joinWith('Tipocaratula', $join_behavior);

		return $this->getImpresions($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Impresions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Impresion[] List of Impresion objects
	 */
	public function getImpresionsJoinTipoimpresion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ImpresionQuery::create(null, $criteria);
		$query->joinWith('Tipoimpresion', $join_behavior);

		return $this->getImpresions($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Impresions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Impresion[] List of Impresion objects
	 */
	public function getImpresionsJoinTipoencuadernacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ImpresionQuery::create(null, $criteria);
		$query->joinWith('Tipoencuadernacion', $join_behavior);

		return $this->getImpresions($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Impresions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Impresion[] List of Impresion objects
	 */
	public function getImpresionsJoinTipotripa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ImpresionQuery::create(null, $criteria);
		$query->joinWith('Tipotripa', $join_behavior);

		return $this->getImpresions($query, $con);
	}

	/**
	 * Clears out the collVentas collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVentas()
	 */
	public function clearVentas()
	{
		$this->collVentas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVentas collection.
	 *
	 * By default this just sets the collVentas collection to an empty array (like clearcollVentas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVentas()
	{
		$this->collVentas = new PropelObjectCollection();
		$this->collVentas->setModel('Venta');
	}

	/**
	 * Gets an array of Venta objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Edicion is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Venta[] List of Venta objects
	 * @throws     PropelException
	 */
	public function getVentas($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collVentas || null !== $criteria) {
			if ($this->isNew() && null === $this->collVentas) {
				// return empty collection
				$this->initVentas();
			} else {
				$collVentas = VentaQuery::create(null, $criteria)
					->filterByEdicion($this)
					->find($con);
				if (null !== $criteria) {
					return $collVentas;
				}
				$this->collVentas = $collVentas;
			}
		}
		return $this->collVentas;
	}

	/**
	 * Returns the number of related Venta objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Venta objects.
	 * @throws     PropelException
	 */
	public function countVentas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collVentas || null !== $criteria) {
			if ($this->isNew() && null === $this->collVentas) {
				return 0;
			} else {
				$query = VentaQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByEdicion($this)
					->count($con);
			}
		} else {
			return count($this->collVentas);
		}
	}

	/**
	 * Method called to associate a Venta object to this object
	 * through the Venta foreign key attribute.
	 *
	 * @param      Venta $l Venta
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVenta(Venta $l)
	{
		if ($this->collVentas === null) {
			$this->initVentas();
		}
		if (!$this->collVentas->contains($l)) { // only add it if the **same** object is not already associated
			$this->collVentas[]= $l;
			$l->setEdicion($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Ventas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Venta[] List of Venta objects
	 */
	public function getVentasJoinLibreria($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = VentaQuery::create(null, $criteria);
		$query->joinWith('Libreria', $join_behavior);

		return $this->getVentas($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Edicion is new, it will return
	 * an empty collection; or if this Edicion has previously
	 * been saved, it will retrieve related Ventas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Edicion.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Venta[] List of Venta objects
	 */
	public function getVentasJoinTipodestino($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = VentaQuery::create(null, $criteria);
		$query->joinWith('Tipodestino', $join_behavior);

		return $this->getVentas($query, $con);
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->traduccion = null;
		$this->lengua_origen = null;
		$this->lengua_traducir = null;
		$this->traductor = null;
		$this->numero_reimpresion = null;
		$this->coedicion = null;
		$this->id_libro = null;
		$this->corrector = null;
		$this->coleccion = null;
		$this->isbn = null;
		$this->deposito_legal = null;
		$this->diagramador = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collDistribucions) {
				foreach ((array) $this->collDistribucions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collHistoricos) {
				foreach ((array) $this->collHistoricos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collImpresions) {
				foreach ((array) $this->collImpresions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVentas) {
				foreach ((array) $this->collVentas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collDistribucions = null;
		$this->collHistoricos = null;
		$this->collImpresions = null;
		$this->collVentas = null;
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseEdicion:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BaseEdicion
