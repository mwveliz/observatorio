<?php


/**
 * Base class that represents a query for the 'respuesta_item' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Wed Mar 12 10:33:15 2014
 *
 * @method     RespuestaItemQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     RespuestaItemQuery orderByIdRespuestaEncuesta($order = Criteria::ASC) Order by the id_respuesta_encuesta column
 * @method     RespuestaItemQuery orderByValor($order = Criteria::ASC) Order by the valor column
 * @method     RespuestaItemQuery orderByIdItem($order = Criteria::ASC) Order by the id_item column
 * @method     RespuestaItemQuery orderByTipoItem($order = Criteria::ASC) Order by the tipo_item column
 * @method     RespuestaItemQuery orderByIdOpcion($order = Criteria::ASC) Order by the id_opcion column
 *
 * @method     RespuestaItemQuery groupById() Group by the id column
 * @method     RespuestaItemQuery groupByIdRespuestaEncuesta() Group by the id_respuesta_encuesta column
 * @method     RespuestaItemQuery groupByValor() Group by the valor column
 * @method     RespuestaItemQuery groupByIdItem() Group by the id_item column
 * @method     RespuestaItemQuery groupByTipoItem() Group by the tipo_item column
 * @method     RespuestaItemQuery groupByIdOpcion() Group by the id_opcion column
 *
 * @method     RespuestaItemQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     RespuestaItemQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     RespuestaItemQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     RespuestaItemQuery leftJoinRespuestaEncuesta($relationAlias = null) Adds a LEFT JOIN clause to the query using the RespuestaEncuesta relation
 * @method     RespuestaItemQuery rightJoinRespuestaEncuesta($relationAlias = null) Adds a RIGHT JOIN clause to the query using the RespuestaEncuesta relation
 * @method     RespuestaItemQuery innerJoinRespuestaEncuesta($relationAlias = null) Adds a INNER JOIN clause to the query using the RespuestaEncuesta relation
 *
 * @method     RespuestaItemQuery leftJoinItem($relationAlias = null) Adds a LEFT JOIN clause to the query using the Item relation
 * @method     RespuestaItemQuery rightJoinItem($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Item relation
 * @method     RespuestaItemQuery innerJoinItem($relationAlias = null) Adds a INNER JOIN clause to the query using the Item relation
 *
 * @method     RespuestaItemQuery leftJoinOpcionRespuesta($relationAlias = null) Adds a LEFT JOIN clause to the query using the OpcionRespuesta relation
 * @method     RespuestaItemQuery rightJoinOpcionRespuesta($relationAlias = null) Adds a RIGHT JOIN clause to the query using the OpcionRespuesta relation
 * @method     RespuestaItemQuery innerJoinOpcionRespuesta($relationAlias = null) Adds a INNER JOIN clause to the query using the OpcionRespuesta relation
 *
 * @method     RespuestaItem findOne(PropelPDO $con = null) Return the first RespuestaItem matching the query
 * @method     RespuestaItem findOneOrCreate(PropelPDO $con = null) Return the first RespuestaItem matching the query, or a new RespuestaItem object populated from the query conditions when no match is found
 *
 * @method     RespuestaItem findOneById(string $id) Return the first RespuestaItem filtered by the id column
 * @method     RespuestaItem findOneByIdRespuestaEncuesta(string $id_respuesta_encuesta) Return the first RespuestaItem filtered by the id_respuesta_encuesta column
 * @method     RespuestaItem findOneByValor(string $valor) Return the first RespuestaItem filtered by the valor column
 * @method     RespuestaItem findOneByIdItem(string $id_item) Return the first RespuestaItem filtered by the id_item column
 * @method     RespuestaItem findOneByTipoItem(string $tipo_item) Return the first RespuestaItem filtered by the tipo_item column
 * @method     RespuestaItem findOneByIdOpcion(string $id_opcion) Return the first RespuestaItem filtered by the id_opcion column
 *
 * @method     array findById(string $id) Return RespuestaItem objects filtered by the id column
 * @method     array findByIdRespuestaEncuesta(string $id_respuesta_encuesta) Return RespuestaItem objects filtered by the id_respuesta_encuesta column
 * @method     array findByValor(string $valor) Return RespuestaItem objects filtered by the valor column
 * @method     array findByIdItem(string $id_item) Return RespuestaItem objects filtered by the id_item column
 * @method     array findByTipoItem(string $tipo_item) Return RespuestaItem objects filtered by the tipo_item column
 * @method     array findByIdOpcion(string $id_opcion) Return RespuestaItem objects filtered by the id_opcion column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseRespuestaItemQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseRespuestaItemQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'RespuestaItem', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new RespuestaItemQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    RespuestaItemQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof RespuestaItemQuery) {
			return $criteria;
		}
		$query = new RespuestaItemQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    RespuestaItem|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = RespuestaItemPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(RespuestaItemPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(RespuestaItemPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     string|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(RespuestaItemPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the id_respuesta_encuesta column
	 * 
	 * @param     string|array $idRespuestaEncuesta The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function filterByIdRespuestaEncuesta($idRespuestaEncuesta = null, $comparison = null)
	{
		if (is_array($idRespuestaEncuesta)) {
			$useMinMax = false;
			if (isset($idRespuestaEncuesta['min'])) {
				$this->addUsingAlias(RespuestaItemPeer::ID_RESPUESTA_ENCUESTA, $idRespuestaEncuesta['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idRespuestaEncuesta['max'])) {
				$this->addUsingAlias(RespuestaItemPeer::ID_RESPUESTA_ENCUESTA, $idRespuestaEncuesta['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(RespuestaItemPeer::ID_RESPUESTA_ENCUESTA, $idRespuestaEncuesta, $comparison);
	}

	/**
	 * Filter the query on the valor column
	 * 
	 * @param     string $valor The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function filterByValor($valor = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($valor)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $valor)) {
				$valor = str_replace('*', '%', $valor);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(RespuestaItemPeer::VALOR, $valor, $comparison);
	}

	/**
	 * Filter the query on the id_item column
	 * 
	 * @param     string|array $idItem The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function filterByIdItem($idItem = null, $comparison = null)
	{
		if (is_array($idItem)) {
			$useMinMax = false;
			if (isset($idItem['min'])) {
				$this->addUsingAlias(RespuestaItemPeer::ID_ITEM, $idItem['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idItem['max'])) {
				$this->addUsingAlias(RespuestaItemPeer::ID_ITEM, $idItem['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(RespuestaItemPeer::ID_ITEM, $idItem, $comparison);
	}

	/**
	 * Filter the query on the tipo_item column
	 * 
	 * @param     string $tipoItem The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function filterByTipoItem($tipoItem = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($tipoItem)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $tipoItem)) {
				$tipoItem = str_replace('*', '%', $tipoItem);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(RespuestaItemPeer::TIPO_ITEM, $tipoItem, $comparison);
	}

	/**
	 * Filter the query on the id_opcion column
	 * 
	 * @param     string|array $idOpcion The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function filterByIdOpcion($idOpcion = null, $comparison = null)
	{
		if (is_array($idOpcion)) {
			$useMinMax = false;
			if (isset($idOpcion['min'])) {
				$this->addUsingAlias(RespuestaItemPeer::ID_OPCION, $idOpcion['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idOpcion['max'])) {
				$this->addUsingAlias(RespuestaItemPeer::ID_OPCION, $idOpcion['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(RespuestaItemPeer::ID_OPCION, $idOpcion, $comparison);
	}

	/**
	 * Filter the query by a related RespuestaEncuesta object
	 *
	 * @param     RespuestaEncuesta $respuestaEncuesta  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function filterByRespuestaEncuesta($respuestaEncuesta, $comparison = null)
	{
		return $this
			->addUsingAlias(RespuestaItemPeer::ID_RESPUESTA_ENCUESTA, $respuestaEncuesta->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the RespuestaEncuesta relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function joinRespuestaEncuesta($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('RespuestaEncuesta');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'RespuestaEncuesta');
		}
		
		return $this;
	}

	/**
	 * Use the RespuestaEncuesta relation RespuestaEncuesta object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    RespuestaEncuestaQuery A secondary query class using the current class as primary query
	 */
	public function useRespuestaEncuestaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinRespuestaEncuesta($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'RespuestaEncuesta', 'RespuestaEncuestaQuery');
	}

	/**
	 * Filter the query by a related Item object
	 *
	 * @param     Item $item  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function filterByItem($item, $comparison = null)
	{
		return $this
			->addUsingAlias(RespuestaItemPeer::ID_ITEM, $item->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Item relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function joinItem($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Item');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Item');
		}
		
		return $this;
	}

	/**
	 * Use the Item relation Item object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ItemQuery A secondary query class using the current class as primary query
	 */
	public function useItemQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinItem($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Item', 'ItemQuery');
	}

	/**
	 * Filter the query by a related OpcionRespuesta object
	 *
	 * @param     OpcionRespuesta $opcionRespuesta  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function filterByOpcionRespuesta($opcionRespuesta, $comparison = null)
	{
		return $this
			->addUsingAlias(RespuestaItemPeer::ID_OPCION, $opcionRespuesta->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the OpcionRespuesta relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function joinOpcionRespuesta($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('OpcionRespuesta');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'OpcionRespuesta');
		}
		
		return $this;
	}

	/**
	 * Use the OpcionRespuesta relation OpcionRespuesta object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    OpcionRespuestaQuery A secondary query class using the current class as primary query
	 */
	public function useOpcionRespuestaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinOpcionRespuesta($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'OpcionRespuesta', 'OpcionRespuestaQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     RespuestaItem $respuestaItem Object to remove from the list of results
	 *
	 * @return    RespuestaItemQuery The current query, for fluid interface
	 */
	public function prune($respuestaItem = null)
	{
		if ($respuestaItem) {
			$this->addUsingAlias(RespuestaItemPeer::ID, $respuestaItem->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseRespuestaItemQuery
