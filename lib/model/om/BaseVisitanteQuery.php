<?php


/**
 * Base class that represents a query for the 'visitante' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Wed Mar 12 10:33:16 2014
 *
 * @method     VisitanteQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     VisitanteQuery orderByFecha($order = Criteria::ASC) Order by the fecha column
 * @method     VisitanteQuery orderByNumero($order = Criteria::ASC) Order by the numero column
 * @method     VisitanteQuery orderByIdFeria($order = Criteria::ASC) Order by the id_feria column
 * @method     VisitanteQuery orderByTipoConteo($order = Criteria::ASC) Order by the tipo_conteo column
 * @method     VisitanteQuery orderByIdAcceso($order = Criteria::ASC) Order by the id_acceso column
 * @method     VisitanteQuery orderByHora($order = Criteria::ASC) Order by the hora column
 *
 * @method     VisitanteQuery groupById() Group by the id column
 * @method     VisitanteQuery groupByFecha() Group by the fecha column
 * @method     VisitanteQuery groupByNumero() Group by the numero column
 * @method     VisitanteQuery groupByIdFeria() Group by the id_feria column
 * @method     VisitanteQuery groupByTipoConteo() Group by the tipo_conteo column
 * @method     VisitanteQuery groupByIdAcceso() Group by the id_acceso column
 * @method     VisitanteQuery groupByHora() Group by the hora column
 *
 * @method     VisitanteQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     VisitanteQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     VisitanteQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     VisitanteQuery leftJoinFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the Feria relation
 * @method     VisitanteQuery rightJoinFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Feria relation
 * @method     VisitanteQuery innerJoinFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the Feria relation
 *
 * @method     VisitanteQuery leftJoinAcceso($relationAlias = null) Adds a LEFT JOIN clause to the query using the Acceso relation
 * @method     VisitanteQuery rightJoinAcceso($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Acceso relation
 * @method     VisitanteQuery innerJoinAcceso($relationAlias = null) Adds a INNER JOIN clause to the query using the Acceso relation
 *
 * @method     Visitante findOne(PropelPDO $con = null) Return the first Visitante matching the query
 * @method     Visitante findOneOrCreate(PropelPDO $con = null) Return the first Visitante matching the query, or a new Visitante object populated from the query conditions when no match is found
 *
 * @method     Visitante findOneById(string $id) Return the first Visitante filtered by the id column
 * @method     Visitante findOneByFecha(string $fecha) Return the first Visitante filtered by the fecha column
 * @method     Visitante findOneByNumero(int $numero) Return the first Visitante filtered by the numero column
 * @method     Visitante findOneByIdFeria(string $id_feria) Return the first Visitante filtered by the id_feria column
 * @method     Visitante findOneByTipoConteo(string $tipo_conteo) Return the first Visitante filtered by the tipo_conteo column
 * @method     Visitante findOneByIdAcceso(string $id_acceso) Return the first Visitante filtered by the id_acceso column
 * @method     Visitante findOneByHora(string $hora) Return the first Visitante filtered by the hora column
 *
 * @method     array findById(string $id) Return Visitante objects filtered by the id column
 * @method     array findByFecha(string $fecha) Return Visitante objects filtered by the fecha column
 * @method     array findByNumero(int $numero) Return Visitante objects filtered by the numero column
 * @method     array findByIdFeria(string $id_feria) Return Visitante objects filtered by the id_feria column
 * @method     array findByTipoConteo(string $tipo_conteo) Return Visitante objects filtered by the tipo_conteo column
 * @method     array findByIdAcceso(string $id_acceso) Return Visitante objects filtered by the id_acceso column
 * @method     array findByHora(string $hora) Return Visitante objects filtered by the hora column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseVisitanteQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseVisitanteQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Visitante', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new VisitanteQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    VisitanteQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof VisitanteQuery) {
			return $criteria;
		}
		$query = new VisitanteQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Visitante|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = VisitantePeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(VisitantePeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(VisitantePeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     string|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(VisitantePeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the fecha column
	 * 
	 * @param     string|array $fecha The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function filterByFecha($fecha = null, $comparison = null)
	{
		if (is_array($fecha)) {
			$useMinMax = false;
			if (isset($fecha['min'])) {
				$this->addUsingAlias(VisitantePeer::FECHA, $fecha['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($fecha['max'])) {
				$this->addUsingAlias(VisitantePeer::FECHA, $fecha['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(VisitantePeer::FECHA, $fecha, $comparison);
	}

	/**
	 * Filter the query on the numero column
	 * 
	 * @param     int|array $numero The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function filterByNumero($numero = null, $comparison = null)
	{
		if (is_array($numero)) {
			$useMinMax = false;
			if (isset($numero['min'])) {
				$this->addUsingAlias(VisitantePeer::NUMERO, $numero['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($numero['max'])) {
				$this->addUsingAlias(VisitantePeer::NUMERO, $numero['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(VisitantePeer::NUMERO, $numero, $comparison);
	}

	/**
	 * Filter the query on the id_feria column
	 * 
	 * @param     string|array $idFeria The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function filterByIdFeria($idFeria = null, $comparison = null)
	{
		if (is_array($idFeria)) {
			$useMinMax = false;
			if (isset($idFeria['min'])) {
				$this->addUsingAlias(VisitantePeer::ID_FERIA, $idFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idFeria['max'])) {
				$this->addUsingAlias(VisitantePeer::ID_FERIA, $idFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(VisitantePeer::ID_FERIA, $idFeria, $comparison);
	}

	/**
	 * Filter the query on the tipo_conteo column
	 * 
	 * @param     string $tipoConteo The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function filterByTipoConteo($tipoConteo = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($tipoConteo)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $tipoConteo)) {
				$tipoConteo = str_replace('*', '%', $tipoConteo);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(VisitantePeer::TIPO_CONTEO, $tipoConteo, $comparison);
	}

	/**
	 * Filter the query on the id_acceso column
	 * 
	 * @param     string|array $idAcceso The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function filterByIdAcceso($idAcceso = null, $comparison = null)
	{
		if (is_array($idAcceso)) {
			$useMinMax = false;
			if (isset($idAcceso['min'])) {
				$this->addUsingAlias(VisitantePeer::ID_ACCESO, $idAcceso['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idAcceso['max'])) {
				$this->addUsingAlias(VisitantePeer::ID_ACCESO, $idAcceso['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(VisitantePeer::ID_ACCESO, $idAcceso, $comparison);
	}

	/**
	 * Filter the query on the hora column
	 * 
	 * @param     string|array $hora The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function filterByHora($hora = null, $comparison = null)
	{
		if (is_array($hora)) {
			$useMinMax = false;
			if (isset($hora['min'])) {
				$this->addUsingAlias(VisitantePeer::HORA, $hora['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($hora['max'])) {
				$this->addUsingAlias(VisitantePeer::HORA, $hora['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(VisitantePeer::HORA, $hora, $comparison);
	}

	/**
	 * Filter the query by a related Feria object
	 *
	 * @param     Feria $feria  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function filterByFeria($feria, $comparison = null)
	{
		return $this
			->addUsingAlias(VisitantePeer::ID_FERIA, $feria->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Feria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function joinFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Feria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Feria');
		}
		
		return $this;
	}

	/**
	 * Use the Feria relation Feria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Feria', 'FeriaQuery');
	}

	/**
	 * Filter the query by a related Acceso object
	 *
	 * @param     Acceso $acceso  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function filterByAcceso($acceso, $comparison = null)
	{
		return $this
			->addUsingAlias(VisitantePeer::ID_ACCESO, $acceso->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Acceso relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function joinAcceso($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Acceso');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Acceso');
		}
		
		return $this;
	}

	/**
	 * Use the Acceso relation Acceso object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    AccesoQuery A secondary query class using the current class as primary query
	 */
	public function useAccesoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinAcceso($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Acceso', 'AccesoQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Visitante $visitante Object to remove from the list of results
	 *
	 * @return    VisitanteQuery The current query, for fluid interface
	 */
	public function prune($visitante = null)
	{
		if ($visitante) {
			$this->addUsingAlias(VisitantePeer::ID, $visitante->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseVisitanteQuery
