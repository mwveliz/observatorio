<?php


/**
 * Base class that represents a row from the 'libro' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Thu Feb 20 13:36:21 2014
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseLibro extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'LibroPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        LibroPeer
	 */
	protected static $peer;

	/**
	 * The value for the titulo field.
	 * @var        string
	 */
	protected $titulo;

	/**
	 * The value for the subtitulo field.
	 * @var        string
	 */
	protected $subtitulo;

	/**
	 * The value for the id_genero field.
	 * @var        int
	 */
	protected $id_genero;

	/**
	 * The value for the id_tematica field.
	 * @var        int
	 */
	protected $id_tematica;

	/**
	 * The value for the id_autor field.
	 * @var        int
	 */
	protected $id_autor;

	/**
	 * The value for the id_materia field.
	 * @var        int
	 */
	protected $id_materia;

	/**
	 * The value for the id_tipopublicacion field.
	 * @var        int
	 */
	protected $id_tipopublicacion;

	/**
	 * The value for the sinopsis field.
	 * @var        string
	 */
	protected $sinopsis;

	/**
	 * The value for the cantidad_libro field.
	 * @var        string
	 */
	protected $cantidad_libro;

	/**
	 * The value for the compilador field.
	 * @var        string
	 */
	protected $compilador;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * @var        Genero
	 */
	protected $aGenero;

	/**
	 * @var        Tematica
	 */
	protected $aTematica;

	/**
	 * @var        Autor
	 */
	protected $aAutor;

	/**
	 * @var        Materia
	 */
	protected $aMateria;

	/**
	 * @var        Tipopublicacion
	 */
	protected $aTipopublicacion;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [titulo] column value.
	 * 
	 * @return     string
	 */
	public function getTitulo()
	{
		return $this->titulo;
	}

	/**
	 * Get the [subtitulo] column value.
	 * 
	 * @return     string
	 */
	public function getSubtitulo()
	{
		return $this->subtitulo;
	}

	/**
	 * Get the [id_genero] column value.
	 * 
	 * @return     int
	 */
	public function getIdGenero()
	{
		return $this->id_genero;
	}

	/**
	 * Get the [id_tematica] column value.
	 * 
	 * @return     int
	 */
	public function getIdTematica()
	{
		return $this->id_tematica;
	}

	/**
	 * Get the [id_autor] column value.
	 * 
	 * @return     int
	 */
	public function getIdAutor()
	{
		return $this->id_autor;
	}

	/**
	 * Get the [id_materia] column value.
	 * 
	 * @return     int
	 */
	public function getIdMateria()
	{
		return $this->id_materia;
	}

	/**
	 * Get the [id_tipopublicacion] column value.
	 * 
	 * @return     int
	 */
	public function getIdTipopublicacion()
	{
		return $this->id_tipopublicacion;
	}

	/**
	 * Get the [sinopsis] column value.
	 * 
	 * @return     string
	 */
	public function getSinopsis()
	{
		return $this->sinopsis;
	}

	/**
	 * Get the [cantidad_libro] column value.
	 * 
	 * @return     string
	 */
	public function getCantidadLibro()
	{
		return $this->cantidad_libro;
	}

	/**
	 * Get the [compilador] column value.
	 * 
	 * @return     string
	 */
	public function getCompilador()
	{
		return $this->compilador;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Set the value of [titulo] column.
	 * 
	 * @param      string $v new value
	 * @return     Libro The current object (for fluent API support)
	 */
	public function setTitulo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->titulo !== $v) {
			$this->titulo = $v;
			$this->modifiedColumns[] = LibroPeer::TITULO;
		}

		return $this;
	} // setTitulo()

	/**
	 * Set the value of [subtitulo] column.
	 * 
	 * @param      string $v new value
	 * @return     Libro The current object (for fluent API support)
	 */
	public function setSubtitulo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subtitulo !== $v) {
			$this->subtitulo = $v;
			$this->modifiedColumns[] = LibroPeer::SUBTITULO;
		}

		return $this;
	} // setSubtitulo()

	/**
	 * Set the value of [id_genero] column.
	 * 
	 * @param      int $v new value
	 * @return     Libro The current object (for fluent API support)
	 */
	public function setIdGenero($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_genero !== $v) {
			$this->id_genero = $v;
			$this->modifiedColumns[] = LibroPeer::ID_GENERO;
		}

		if ($this->aGenero !== null && $this->aGenero->getId() !== $v) {
			$this->aGenero = null;
		}

		return $this;
	} // setIdGenero()

	/**
	 * Set the value of [id_tematica] column.
	 * 
	 * @param      int $v new value
	 * @return     Libro The current object (for fluent API support)
	 */
	public function setIdTematica($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_tematica !== $v) {
			$this->id_tematica = $v;
			$this->modifiedColumns[] = LibroPeer::ID_TEMATICA;
		}

		if ($this->aTematica !== null && $this->aTematica->getId() !== $v) {
			$this->aTematica = null;
		}

		return $this;
	} // setIdTematica()

	/**
	 * Set the value of [id_autor] column.
	 * 
	 * @param      int $v new value
	 * @return     Libro The current object (for fluent API support)
	 */
	public function setIdAutor($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_autor !== $v) {
			$this->id_autor = $v;
			$this->modifiedColumns[] = LibroPeer::ID_AUTOR;
		}

		if ($this->aAutor !== null && $this->aAutor->getId() !== $v) {
			$this->aAutor = null;
		}

		return $this;
	} // setIdAutor()

	/**
	 * Set the value of [id_materia] column.
	 * 
	 * @param      int $v new value
	 * @return     Libro The current object (for fluent API support)
	 */
	public function setIdMateria($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_materia !== $v) {
			$this->id_materia = $v;
			$this->modifiedColumns[] = LibroPeer::ID_MATERIA;
		}

		if ($this->aMateria !== null && $this->aMateria->getId() !== $v) {
			$this->aMateria = null;
		}

		return $this;
	} // setIdMateria()

	/**
	 * Set the value of [id_tipopublicacion] column.
	 * 
	 * @param      int $v new value
	 * @return     Libro The current object (for fluent API support)
	 */
	public function setIdTipopublicacion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_tipopublicacion !== $v) {
			$this->id_tipopublicacion = $v;
			$this->modifiedColumns[] = LibroPeer::ID_TIPOPUBLICACION;
		}

		if ($this->aTipopublicacion !== null && $this->aTipopublicacion->getId() !== $v) {
			$this->aTipopublicacion = null;
		}

		return $this;
	} // setIdTipopublicacion()

	/**
	 * Set the value of [sinopsis] column.
	 * 
	 * @param      string $v new value
	 * @return     Libro The current object (for fluent API support)
	 */
	public function setSinopsis($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sinopsis !== $v) {
			$this->sinopsis = $v;
			$this->modifiedColumns[] = LibroPeer::SINOPSIS;
		}

		return $this;
	} // setSinopsis()

	/**
	 * Set the value of [cantidad_libro] column.
	 * 
	 * @param      string $v new value
	 * @return     Libro The current object (for fluent API support)
	 */
	public function setCantidadLibro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cantidad_libro !== $v) {
			$this->cantidad_libro = $v;
			$this->modifiedColumns[] = LibroPeer::CANTIDAD_LIBRO;
		}

		return $this;
	} // setCantidadLibro()

	/**
	 * Set the value of [compilador] column.
	 * 
	 * @param      string $v new value
	 * @return     Libro The current object (for fluent API support)
	 */
	public function setCompilador($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->compilador !== $v) {
			$this->compilador = $v;
			$this->modifiedColumns[] = LibroPeer::COMPILADOR;
		}

		return $this;
	} // setCompilador()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     Libro The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = LibroPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->titulo = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->subtitulo = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->id_genero = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->id_tematica = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->id_autor = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->id_materia = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->id_tipopublicacion = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->sinopsis = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->cantidad_libro = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->compilador = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->id = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 11; // 11 = LibroPeer::NUM_COLUMNS - LibroPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Libro object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aGenero !== null && $this->id_genero !== $this->aGenero->getId()) {
			$this->aGenero = null;
		}
		if ($this->aTematica !== null && $this->id_tematica !== $this->aTematica->getId()) {
			$this->aTematica = null;
		}
		if ($this->aAutor !== null && $this->id_autor !== $this->aAutor->getId()) {
			$this->aAutor = null;
		}
		if ($this->aMateria !== null && $this->id_materia !== $this->aMateria->getId()) {
			$this->aMateria = null;
		}
		if ($this->aTipopublicacion !== null && $this->id_tipopublicacion !== $this->aTipopublicacion->getId()) {
			$this->aTipopublicacion = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LibroPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = LibroPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aGenero = null;
			$this->aTematica = null;
			$this->aAutor = null;
			$this->aMateria = null;
			$this->aTipopublicacion = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LibroPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseLibro:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				LibroQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseLibro:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LibroPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseLibro:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseLibro:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				LibroPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aGenero !== null) {
				if ($this->aGenero->isModified() || $this->aGenero->isNew()) {
					$affectedRows += $this->aGenero->save($con);
				}
				$this->setGenero($this->aGenero);
			}

			if ($this->aTematica !== null) {
				if ($this->aTematica->isModified() || $this->aTematica->isNew()) {
					$affectedRows += $this->aTematica->save($con);
				}
				$this->setTematica($this->aTematica);
			}

			if ($this->aAutor !== null) {
				if ($this->aAutor->isModified() || $this->aAutor->isNew()) {
					$affectedRows += $this->aAutor->save($con);
				}
				$this->setAutor($this->aAutor);
			}

			if ($this->aMateria !== null) {
				if ($this->aMateria->isModified() || $this->aMateria->isNew()) {
					$affectedRows += $this->aMateria->save($con);
				}
				$this->setMateria($this->aMateria);
			}

			if ($this->aTipopublicacion !== null) {
				if ($this->aTipopublicacion->isModified() || $this->aTipopublicacion->isNew()) {
					$affectedRows += $this->aTipopublicacion->save($con);
				}
				$this->setTipopublicacion($this->aTipopublicacion);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = LibroPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(LibroPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.LibroPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows += 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows += LibroPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aGenero !== null) {
				if (!$this->aGenero->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aGenero->getValidationFailures());
				}
			}

			if ($this->aTematica !== null) {
				if (!$this->aTematica->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTematica->getValidationFailures());
				}
			}

			if ($this->aAutor !== null) {
				if (!$this->aAutor->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAutor->getValidationFailures());
				}
			}

			if ($this->aMateria !== null) {
				if (!$this->aMateria->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMateria->getValidationFailures());
				}
			}

			if ($this->aTipopublicacion !== null) {
				if (!$this->aTipopublicacion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTipopublicacion->getValidationFailures());
				}
			}


			if (($retval = LibroPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = LibroPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getTitulo();
				break;
			case 1:
				return $this->getSubtitulo();
				break;
			case 2:
				return $this->getIdGenero();
				break;
			case 3:
				return $this->getIdTematica();
				break;
			case 4:
				return $this->getIdAutor();
				break;
			case 5:
				return $this->getIdMateria();
				break;
			case 6:
				return $this->getIdTipopublicacion();
				break;
			case 7:
				return $this->getSinopsis();
				break;
			case 8:
				return $this->getCantidadLibro();
				break;
			case 9:
				return $this->getCompilador();
				break;
			case 10:
				return $this->getId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $includeForeignObjects = false)
	{
		$keys = LibroPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getTitulo(),
			$keys[1] => $this->getSubtitulo(),
			$keys[2] => $this->getIdGenero(),
			$keys[3] => $this->getIdTematica(),
			$keys[4] => $this->getIdAutor(),
			$keys[5] => $this->getIdMateria(),
			$keys[6] => $this->getIdTipopublicacion(),
			$keys[7] => $this->getSinopsis(),
			$keys[8] => $this->getCantidadLibro(),
			$keys[9] => $this->getCompilador(),
			$keys[10] => $this->getId(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->aGenero) {
				$result['Genero'] = $this->aGenero->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aTematica) {
				$result['Tematica'] = $this->aTematica->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aAutor) {
				$result['Autor'] = $this->aAutor->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aMateria) {
				$result['Materia'] = $this->aMateria->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aTipopublicacion) {
				$result['Tipopublicacion'] = $this->aTipopublicacion->toArray($keyType, $includeLazyLoadColumns, true);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = LibroPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setTitulo($value);
				break;
			case 1:
				$this->setSubtitulo($value);
				break;
			case 2:
				$this->setIdGenero($value);
				break;
			case 3:
				$this->setIdTematica($value);
				break;
			case 4:
				$this->setIdAutor($value);
				break;
			case 5:
				$this->setIdMateria($value);
				break;
			case 6:
				$this->setIdTipopublicacion($value);
				break;
			case 7:
				$this->setSinopsis($value);
				break;
			case 8:
				$this->setCantidadLibro($value);
				break;
			case 9:
				$this->setCompilador($value);
				break;
			case 10:
				$this->setId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = LibroPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setTitulo($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setSubtitulo($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIdGenero($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIdTematica($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setIdAutor($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setIdMateria($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setIdTipopublicacion($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setSinopsis($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCantidadLibro($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCompilador($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setId($arr[$keys[10]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(LibroPeer::DATABASE_NAME);

		if ($this->isColumnModified(LibroPeer::TITULO)) $criteria->add(LibroPeer::TITULO, $this->titulo);
		if ($this->isColumnModified(LibroPeer::SUBTITULO)) $criteria->add(LibroPeer::SUBTITULO, $this->subtitulo);
		if ($this->isColumnModified(LibroPeer::ID_GENERO)) $criteria->add(LibroPeer::ID_GENERO, $this->id_genero);
		if ($this->isColumnModified(LibroPeer::ID_TEMATICA)) $criteria->add(LibroPeer::ID_TEMATICA, $this->id_tematica);
		if ($this->isColumnModified(LibroPeer::ID_AUTOR)) $criteria->add(LibroPeer::ID_AUTOR, $this->id_autor);
		if ($this->isColumnModified(LibroPeer::ID_MATERIA)) $criteria->add(LibroPeer::ID_MATERIA, $this->id_materia);
		if ($this->isColumnModified(LibroPeer::ID_TIPOPUBLICACION)) $criteria->add(LibroPeer::ID_TIPOPUBLICACION, $this->id_tipopublicacion);
		if ($this->isColumnModified(LibroPeer::SINOPSIS)) $criteria->add(LibroPeer::SINOPSIS, $this->sinopsis);
		if ($this->isColumnModified(LibroPeer::CANTIDAD_LIBRO)) $criteria->add(LibroPeer::CANTIDAD_LIBRO, $this->cantidad_libro);
		if ($this->isColumnModified(LibroPeer::COMPILADOR)) $criteria->add(LibroPeer::COMPILADOR, $this->compilador);
		if ($this->isColumnModified(LibroPeer::ID)) $criteria->add(LibroPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(LibroPeer::DATABASE_NAME);
		$criteria->add(LibroPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Libro (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{
		$copyObj->setTitulo($this->titulo);
		$copyObj->setSubtitulo($this->subtitulo);
		$copyObj->setIdGenero($this->id_genero);
		$copyObj->setIdTematica($this->id_tematica);
		$copyObj->setIdAutor($this->id_autor);
		$copyObj->setIdMateria($this->id_materia);
		$copyObj->setIdTipopublicacion($this->id_tipopublicacion);
		$copyObj->setSinopsis($this->sinopsis);
		$copyObj->setCantidadLibro($this->cantidad_libro);
		$copyObj->setCompilador($this->compilador);

		$copyObj->setNew(true);
		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Libro Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     LibroPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new LibroPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Genero object.
	 *
	 * @param      Genero $v
	 * @return     Libro The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setGenero(Genero $v = null)
	{
		if ($v === null) {
			$this->setIdGenero(NULL);
		} else {
			$this->setIdGenero($v->getId());
		}

		$this->aGenero = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Genero object, it will not be re-added.
		if ($v !== null) {
			$v->addLibro($this);
		}

		return $this;
	}


	/**
	 * Get the associated Genero object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Genero The associated Genero object.
	 * @throws     PropelException
	 */
	public function getGenero(PropelPDO $con = null)
	{
		if ($this->aGenero === null && ($this->id_genero !== null)) {
			$this->aGenero = GeneroQuery::create()->findPk($this->id_genero, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aGenero->addLibros($this);
			 */
		}
		return $this->aGenero;
	}

	/**
	 * Declares an association between this object and a Tematica object.
	 *
	 * @param      Tematica $v
	 * @return     Libro The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTematica(Tematica $v = null)
	{
		if ($v === null) {
			$this->setIdTematica(NULL);
		} else {
			$this->setIdTematica($v->getId());
		}

		$this->aTematica = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tematica object, it will not be re-added.
		if ($v !== null) {
			$v->addLibro($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tematica object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tematica The associated Tematica object.
	 * @throws     PropelException
	 */
	public function getTematica(PropelPDO $con = null)
	{
		if ($this->aTematica === null && ($this->id_tematica !== null)) {
			$this->aTematica = TematicaQuery::create()->findPk($this->id_tematica, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aTematica->addLibros($this);
			 */
		}
		return $this->aTematica;
	}

	/**
	 * Declares an association between this object and a Autor object.
	 *
	 * @param      Autor $v
	 * @return     Libro The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAutor(Autor $v = null)
	{
		if ($v === null) {
			$this->setIdAutor(NULL);
		} else {
			$this->setIdAutor($v->getId());
		}

		$this->aAutor = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Autor object, it will not be re-added.
		if ($v !== null) {
			$v->addLibro($this);
		}

		return $this;
	}


	/**
	 * Get the associated Autor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Autor The associated Autor object.
	 * @throws     PropelException
	 */
	public function getAutor(PropelPDO $con = null)
	{
		if ($this->aAutor === null && ($this->id_autor !== null)) {
			$this->aAutor = AutorQuery::create()->findPk($this->id_autor, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aAutor->addLibros($this);
			 */
		}
		return $this->aAutor;
	}

	/**
	 * Declares an association between this object and a Materia object.
	 *
	 * @param      Materia $v
	 * @return     Libro The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMateria(Materia $v = null)
	{
		if ($v === null) {
			$this->setIdMateria(NULL);
		} else {
			$this->setIdMateria($v->getId());
		}

		$this->aMateria = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Materia object, it will not be re-added.
		if ($v !== null) {
			$v->addLibro($this);
		}

		return $this;
	}


	/**
	 * Get the associated Materia object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Materia The associated Materia object.
	 * @throws     PropelException
	 */
	public function getMateria(PropelPDO $con = null)
	{
		if ($this->aMateria === null && ($this->id_materia !== null)) {
			$this->aMateria = MateriaQuery::create()->findPk($this->id_materia, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aMateria->addLibros($this);
			 */
		}
		return $this->aMateria;
	}

	/**
	 * Declares an association between this object and a Tipopublicacion object.
	 *
	 * @param      Tipopublicacion $v
	 * @return     Libro The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTipopublicacion(Tipopublicacion $v = null)
	{
		if ($v === null) {
			$this->setIdTipopublicacion(NULL);
		} else {
			$this->setIdTipopublicacion($v->getId());
		}

		$this->aTipopublicacion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tipopublicacion object, it will not be re-added.
		if ($v !== null) {
			$v->addLibro($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tipopublicacion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tipopublicacion The associated Tipopublicacion object.
	 * @throws     PropelException
	 */
	public function getTipopublicacion(PropelPDO $con = null)
	{
		if ($this->aTipopublicacion === null && ($this->id_tipopublicacion !== null)) {
			$this->aTipopublicacion = TipopublicacionQuery::create()->findPk($this->id_tipopublicacion, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aTipopublicacion->addLibros($this);
			 */
		}
		return $this->aTipopublicacion;
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->titulo = null;
		$this->subtitulo = null;
		$this->id_genero = null;
		$this->id_tematica = null;
		$this->id_autor = null;
		$this->id_materia = null;
		$this->id_tipopublicacion = null;
		$this->sinopsis = null;
		$this->cantidad_libro = null;
		$this->compilador = null;
		$this->id = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

		$this->aGenero = null;
		$this->aTematica = null;
		$this->aAutor = null;
		$this->aMateria = null;
		$this->aTipopublicacion = null;
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseLibro:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BaseLibro
