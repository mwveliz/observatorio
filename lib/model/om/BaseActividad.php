<?php


/**
 * Base class that represents a row from the 'actividad' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Wed Mar 12 10:33:15 2014
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseActividad extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'ActividadPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ActividadPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the nombre_actividad field.
	 * @var        string
	 */
	protected $nombre_actividad;

	/**
	 * The value for the ponente field.
	 * @var        string
	 */
	protected $ponente;

	/**
	 * The value for the turno field.
	 * @var        boolean
	 */
	protected $turno;

	/**
	 * The value for the ejecutada field.
	 * @var        boolean
	 */
	protected $ejecutada;

	/**
	 * The value for the cantidad_participantes_m field.
	 * @var        int
	 */
	protected $cantidad_participantes_m;

	/**
	 * The value for the cantidad_participantes_f field.
	 * @var        int
	 */
	protected $cantidad_participantes_f;

	/**
	 * The value for the alcanzo_tiempo field.
	 * @var        boolean
	 */
	protected $alcanzo_tiempo;

	/**
	 * The value for the causas_incumplimiento field.
	 * @var        string
	 */
	protected $causas_incumplimiento;

	/**
	 * The value for the id_municipio field.
	 * @var        int
	 */
	protected $id_municipio;

	/**
	 * The value for the escuela field.
	 * @var        boolean
	 */
	protected $escuela;

	/**
	 * The value for the refugio field.
	 * @var        boolean
	 */
	protected $refugio;

	/**
	 * The value for the observaciones field.
	 * @var        string
	 */
	protected $observaciones;

	/**
	 * The value for the id_sala field.
	 * @var        int
	 */
	protected $id_sala;

	/**
	 * The value for the id_tipo_actividad field.
	 * @var        int
	 */
	protected $id_tipo_actividad;

	/**
	 * The value for the fecha field.
	 * @var        string
	 */
	protected $fecha;

	/**
	 * The value for the hora field.
	 * @var        string
	 */
	protected $hora;

	/**
	 * The value for the facilitador field.
	 * @var        int
	 */
	protected $facilitador;

	/**
	 * The value for the id_feria field.
	 * @var        int
	 */
	protected $id_feria;

	/**
	 * @var        Sala
	 */
	protected $aSala;

	/**
	 * @var        TipoActividad
	 */
	protected $aTipoActividad;

	/**
	 * @var        Feria
	 */
	protected $aFeria;

	/**
	 * @var        array PonenteRelActividad[] Collection to store aggregation of PonenteRelActividad objects.
	 */
	protected $collPonenteRelActividads;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [nombre_actividad] column value.
	 * 
	 * @return     string
	 */
	public function getNombreActividad()
	{
		return $this->nombre_actividad;
	}

	/**
	 * Get the [ponente] column value.
	 * 
	 * @return     string
	 */
	public function getPonente()
	{
		return $this->ponente;
	}

	/**
	 * Get the [turno] column value.
	 * 
	 * @return     boolean
	 */
	public function getTurno()
	{
		return $this->turno;
	}

	/**
	 * Get the [ejecutada] column value.
	 * 
	 * @return     boolean
	 */
	public function getEjecutada()
	{
		return $this->ejecutada;
	}

	/**
	 * Get the [cantidad_participantes_m] column value.
	 * 
	 * @return     int
	 */
	public function getCantidadParticipantesM()
	{
		return $this->cantidad_participantes_m;
	}

	/**
	 * Get the [cantidad_participantes_f] column value.
	 * 
	 * @return     int
	 */
	public function getCantidadParticipantesF()
	{
		return $this->cantidad_participantes_f;
	}

	/**
	 * Get the [alcanzo_tiempo] column value.
	 * 
	 * @return     boolean
	 */
	public function getAlcanzoTiempo()
	{
		return $this->alcanzo_tiempo;
	}

	/**
	 * Get the [causas_incumplimiento] column value.
	 * 
	 * @return     string
	 */
	public function getCausasIncumplimiento()
	{
		return $this->causas_incumplimiento;
	}

	/**
	 * Get the [id_municipio] column value.
	 * 
	 * @return     int
	 */
	public function getIdMunicipio()
	{
		return $this->id_municipio;
	}

	/**
	 * Get the [escuela] column value.
	 * 
	 * @return     boolean
	 */
	public function getEscuela()
	{
		return $this->escuela;
	}

	/**
	 * Get the [refugio] column value.
	 * 
	 * @return     boolean
	 */
	public function getRefugio()
	{
		return $this->refugio;
	}

	/**
	 * Get the [observaciones] column value.
	 * 
	 * @return     string
	 */
	public function getObservaciones()
	{
		return $this->observaciones;
	}

	/**
	 * Get the [id_sala] column value.
	 * 
	 * @return     int
	 */
	public function getIdSala()
	{
		return $this->id_sala;
	}

	/**
	 * Get the [id_tipo_actividad] column value.
	 * 
	 * @return     int
	 */
	public function getIdTipoActividad()
	{
		return $this->id_tipo_actividad;
	}

	/**
	 * Get the [optionally formatted] temporal [fecha] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFecha($format = 'Y-m-d')
	{
		if ($this->fecha === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->fecha);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [hora] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getHora($format = 'H:i:s')
	{
		if ($this->hora === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->hora);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->hora, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [facilitador] column value.
	 * 
	 * @return     int
	 */
	public function getFacilitador()
	{
		return $this->facilitador;
	}

	/**
	 * Get the [id_feria] column value.
	 * 
	 * @return     int
	 */
	public function getIdFeria()
	{
		return $this->id_feria;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ActividadPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [nombre_actividad] column.
	 * 
	 * @param      string $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setNombreActividad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre_actividad !== $v) {
			$this->nombre_actividad = $v;
			$this->modifiedColumns[] = ActividadPeer::NOMBRE_ACTIVIDAD;
		}

		return $this;
	} // setNombreActividad()

	/**
	 * Set the value of [ponente] column.
	 * 
	 * @param      string $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setPonente($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ponente !== $v) {
			$this->ponente = $v;
			$this->modifiedColumns[] = ActividadPeer::PONENTE;
		}

		return $this;
	} // setPonente()

	/**
	 * Set the value of [turno] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setTurno($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->turno !== $v) {
			$this->turno = $v;
			$this->modifiedColumns[] = ActividadPeer::TURNO;
		}

		return $this;
	} // setTurno()

	/**
	 * Set the value of [ejecutada] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setEjecutada($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->ejecutada !== $v) {
			$this->ejecutada = $v;
			$this->modifiedColumns[] = ActividadPeer::EJECUTADA;
		}

		return $this;
	} // setEjecutada()

	/**
	 * Set the value of [cantidad_participantes_m] column.
	 * 
	 * @param      int $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setCantidadParticipantesM($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cantidad_participantes_m !== $v) {
			$this->cantidad_participantes_m = $v;
			$this->modifiedColumns[] = ActividadPeer::CANTIDAD_PARTICIPANTES_M;
		}

		return $this;
	} // setCantidadParticipantesM()

	/**
	 * Set the value of [cantidad_participantes_f] column.
	 * 
	 * @param      int $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setCantidadParticipantesF($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cantidad_participantes_f !== $v) {
			$this->cantidad_participantes_f = $v;
			$this->modifiedColumns[] = ActividadPeer::CANTIDAD_PARTICIPANTES_F;
		}

		return $this;
	} // setCantidadParticipantesF()

	/**
	 * Set the value of [alcanzo_tiempo] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setAlcanzoTiempo($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->alcanzo_tiempo !== $v) {
			$this->alcanzo_tiempo = $v;
			$this->modifiedColumns[] = ActividadPeer::ALCANZO_TIEMPO;
		}

		return $this;
	} // setAlcanzoTiempo()

	/**
	 * Set the value of [causas_incumplimiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setCausasIncumplimiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->causas_incumplimiento !== $v) {
			$this->causas_incumplimiento = $v;
			$this->modifiedColumns[] = ActividadPeer::CAUSAS_INCUMPLIMIENTO;
		}

		return $this;
	} // setCausasIncumplimiento()

	/**
	 * Set the value of [id_municipio] column.
	 * 
	 * @param      int $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setIdMunicipio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_municipio !== $v) {
			$this->id_municipio = $v;
			$this->modifiedColumns[] = ActividadPeer::ID_MUNICIPIO;
		}

		return $this;
	} // setIdMunicipio()

	/**
	 * Set the value of [escuela] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setEscuela($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->escuela !== $v) {
			$this->escuela = $v;
			$this->modifiedColumns[] = ActividadPeer::ESCUELA;
		}

		return $this;
	} // setEscuela()

	/**
	 * Set the value of [refugio] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setRefugio($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->refugio !== $v) {
			$this->refugio = $v;
			$this->modifiedColumns[] = ActividadPeer::REFUGIO;
		}

		return $this;
	} // setRefugio()

	/**
	 * Set the value of [observaciones] column.
	 * 
	 * @param      string $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setObservaciones($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->observaciones !== $v) {
			$this->observaciones = $v;
			$this->modifiedColumns[] = ActividadPeer::OBSERVACIONES;
		}

		return $this;
	} // setObservaciones()

	/**
	 * Set the value of [id_sala] column.
	 * 
	 * @param      int $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setIdSala($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_sala !== $v) {
			$this->id_sala = $v;
			$this->modifiedColumns[] = ActividadPeer::ID_SALA;
		}

		if ($this->aSala !== null && $this->aSala->getId() !== $v) {
			$this->aSala = null;
		}

		return $this;
	} // setIdSala()

	/**
	 * Set the value of [id_tipo_actividad] column.
	 * 
	 * @param      int $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setIdTipoActividad($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_tipo_actividad !== $v) {
			$this->id_tipo_actividad = $v;
			$this->modifiedColumns[] = ActividadPeer::ID_TIPO_ACTIVIDAD;
		}

		if ($this->aTipoActividad !== null && $this->aTipoActividad->getId() !== $v) {
			$this->aTipoActividad = null;
		}

		return $this;
	} // setIdTipoActividad()

	/**
	 * Sets the value of [fecha] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setFecha($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha !== null && $tmpDt = new DateTime($this->fecha)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fecha = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = ActividadPeer::FECHA;
			}
		} // if either are not null

		return $this;
	} // setFecha()

	/**
	 * Sets the value of [hora] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setHora($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->hora !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->hora !== null && $tmpDt = new DateTime($this->hora)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->hora = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = ActividadPeer::HORA;
			}
		} // if either are not null

		return $this;
	} // setHora()

	/**
	 * Set the value of [facilitador] column.
	 * 
	 * @param      int $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setFacilitador($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->facilitador !== $v) {
			$this->facilitador = $v;
			$this->modifiedColumns[] = ActividadPeer::FACILITADOR;
		}

		return $this;
	} // setFacilitador()

	/**
	 * Set the value of [id_feria] column.
	 * 
	 * @param      int $v new value
	 * @return     Actividad The current object (for fluent API support)
	 */
	public function setIdFeria($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_feria !== $v) {
			$this->id_feria = $v;
			$this->modifiedColumns[] = ActividadPeer::ID_FERIA;
		}

		if ($this->aFeria !== null && $this->aFeria->getId() !== $v) {
			$this->aFeria = null;
		}

		return $this;
	} // setIdFeria()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->nombre_actividad = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->ponente = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->turno = ($row[$startcol + 3] !== null) ? (boolean) $row[$startcol + 3] : null;
			$this->ejecutada = ($row[$startcol + 4] !== null) ? (boolean) $row[$startcol + 4] : null;
			$this->cantidad_participantes_m = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->cantidad_participantes_f = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->alcanzo_tiempo = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->causas_incumplimiento = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->id_municipio = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->escuela = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->refugio = ($row[$startcol + 11] !== null) ? (boolean) $row[$startcol + 11] : null;
			$this->observaciones = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->id_sala = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->id_tipo_actividad = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->fecha = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->hora = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->facilitador = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->id_feria = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 19; // 19 = ActividadPeer::NUM_COLUMNS - ActividadPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Actividad object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aSala !== null && $this->id_sala !== $this->aSala->getId()) {
			$this->aSala = null;
		}
		if ($this->aTipoActividad !== null && $this->id_tipo_actividad !== $this->aTipoActividad->getId()) {
			$this->aTipoActividad = null;
		}
		if ($this->aFeria !== null && $this->id_feria !== $this->aFeria->getId()) {
			$this->aFeria = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActividadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ActividadPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aSala = null;
			$this->aTipoActividad = null;
			$this->aFeria = null;
			$this->collPonenteRelActividads = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActividadPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseActividad:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				ActividadQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseActividad:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActividadPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseActividad:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseActividad:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ActividadPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSala !== null) {
				if ($this->aSala->isModified() || $this->aSala->isNew()) {
					$affectedRows += $this->aSala->save($con);
				}
				$this->setSala($this->aSala);
			}

			if ($this->aTipoActividad !== null) {
				if ($this->aTipoActividad->isModified() || $this->aTipoActividad->isNew()) {
					$affectedRows += $this->aTipoActividad->save($con);
				}
				$this->setTipoActividad($this->aTipoActividad);
			}

			if ($this->aFeria !== null) {
				if ($this->aFeria->isModified() || $this->aFeria->isNew()) {
					$affectedRows += $this->aFeria->save($con);
				}
				$this->setFeria($this->aFeria);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ActividadPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(ActividadPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.ActividadPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows += 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows += ActividadPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collPonenteRelActividads !== null) {
				foreach ($this->collPonenteRelActividads as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSala !== null) {
				if (!$this->aSala->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSala->getValidationFailures());
				}
			}

			if ($this->aTipoActividad !== null) {
				if (!$this->aTipoActividad->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTipoActividad->getValidationFailures());
				}
			}

			if ($this->aFeria !== null) {
				if (!$this->aFeria->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aFeria->getValidationFailures());
				}
			}


			if (($retval = ActividadPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collPonenteRelActividads !== null) {
					foreach ($this->collPonenteRelActividads as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ActividadPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getNombreActividad();
				break;
			case 2:
				return $this->getPonente();
				break;
			case 3:
				return $this->getTurno();
				break;
			case 4:
				return $this->getEjecutada();
				break;
			case 5:
				return $this->getCantidadParticipantesM();
				break;
			case 6:
				return $this->getCantidadParticipantesF();
				break;
			case 7:
				return $this->getAlcanzoTiempo();
				break;
			case 8:
				return $this->getCausasIncumplimiento();
				break;
			case 9:
				return $this->getIdMunicipio();
				break;
			case 10:
				return $this->getEscuela();
				break;
			case 11:
				return $this->getRefugio();
				break;
			case 12:
				return $this->getObservaciones();
				break;
			case 13:
				return $this->getIdSala();
				break;
			case 14:
				return $this->getIdTipoActividad();
				break;
			case 15:
				return $this->getFecha();
				break;
			case 16:
				return $this->getHora();
				break;
			case 17:
				return $this->getFacilitador();
				break;
			case 18:
				return $this->getIdFeria();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $includeForeignObjects = false)
	{
		$keys = ActividadPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getNombreActividad(),
			$keys[2] => $this->getPonente(),
			$keys[3] => $this->getTurno(),
			$keys[4] => $this->getEjecutada(),
			$keys[5] => $this->getCantidadParticipantesM(),
			$keys[6] => $this->getCantidadParticipantesF(),
			$keys[7] => $this->getAlcanzoTiempo(),
			$keys[8] => $this->getCausasIncumplimiento(),
			$keys[9] => $this->getIdMunicipio(),
			$keys[10] => $this->getEscuela(),
			$keys[11] => $this->getRefugio(),
			$keys[12] => $this->getObservaciones(),
			$keys[13] => $this->getIdSala(),
			$keys[14] => $this->getIdTipoActividad(),
			$keys[15] => $this->getFecha(),
			$keys[16] => $this->getHora(),
			$keys[17] => $this->getFacilitador(),
			$keys[18] => $this->getIdFeria(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->aSala) {
				$result['Sala'] = $this->aSala->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aTipoActividad) {
				$result['TipoActividad'] = $this->aTipoActividad->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aFeria) {
				$result['Feria'] = $this->aFeria->toArray($keyType, $includeLazyLoadColumns, true);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ActividadPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setNombreActividad($value);
				break;
			case 2:
				$this->setPonente($value);
				break;
			case 3:
				$this->setTurno($value);
				break;
			case 4:
				$this->setEjecutada($value);
				break;
			case 5:
				$this->setCantidadParticipantesM($value);
				break;
			case 6:
				$this->setCantidadParticipantesF($value);
				break;
			case 7:
				$this->setAlcanzoTiempo($value);
				break;
			case 8:
				$this->setCausasIncumplimiento($value);
				break;
			case 9:
				$this->setIdMunicipio($value);
				break;
			case 10:
				$this->setEscuela($value);
				break;
			case 11:
				$this->setRefugio($value);
				break;
			case 12:
				$this->setObservaciones($value);
				break;
			case 13:
				$this->setIdSala($value);
				break;
			case 14:
				$this->setIdTipoActividad($value);
				break;
			case 15:
				$this->setFecha($value);
				break;
			case 16:
				$this->setHora($value);
				break;
			case 17:
				$this->setFacilitador($value);
				break;
			case 18:
				$this->setIdFeria($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ActividadPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNombreActividad($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPonente($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setTurno($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setEjecutada($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCantidadParticipantesM($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCantidadParticipantesF($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setAlcanzoTiempo($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCausasIncumplimiento($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIdMunicipio($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setEscuela($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setRefugio($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setObservaciones($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setIdSala($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setIdTipoActividad($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setFecha($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setHora($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setFacilitador($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setIdFeria($arr[$keys[18]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ActividadPeer::DATABASE_NAME);

		if ($this->isColumnModified(ActividadPeer::ID)) $criteria->add(ActividadPeer::ID, $this->id);
		if ($this->isColumnModified(ActividadPeer::NOMBRE_ACTIVIDAD)) $criteria->add(ActividadPeer::NOMBRE_ACTIVIDAD, $this->nombre_actividad);
		if ($this->isColumnModified(ActividadPeer::PONENTE)) $criteria->add(ActividadPeer::PONENTE, $this->ponente);
		if ($this->isColumnModified(ActividadPeer::TURNO)) $criteria->add(ActividadPeer::TURNO, $this->turno);
		if ($this->isColumnModified(ActividadPeer::EJECUTADA)) $criteria->add(ActividadPeer::EJECUTADA, $this->ejecutada);
		if ($this->isColumnModified(ActividadPeer::CANTIDAD_PARTICIPANTES_M)) $criteria->add(ActividadPeer::CANTIDAD_PARTICIPANTES_M, $this->cantidad_participantes_m);
		if ($this->isColumnModified(ActividadPeer::CANTIDAD_PARTICIPANTES_F)) $criteria->add(ActividadPeer::CANTIDAD_PARTICIPANTES_F, $this->cantidad_participantes_f);
		if ($this->isColumnModified(ActividadPeer::ALCANZO_TIEMPO)) $criteria->add(ActividadPeer::ALCANZO_TIEMPO, $this->alcanzo_tiempo);
		if ($this->isColumnModified(ActividadPeer::CAUSAS_INCUMPLIMIENTO)) $criteria->add(ActividadPeer::CAUSAS_INCUMPLIMIENTO, $this->causas_incumplimiento);
		if ($this->isColumnModified(ActividadPeer::ID_MUNICIPIO)) $criteria->add(ActividadPeer::ID_MUNICIPIO, $this->id_municipio);
		if ($this->isColumnModified(ActividadPeer::ESCUELA)) $criteria->add(ActividadPeer::ESCUELA, $this->escuela);
		if ($this->isColumnModified(ActividadPeer::REFUGIO)) $criteria->add(ActividadPeer::REFUGIO, $this->refugio);
		if ($this->isColumnModified(ActividadPeer::OBSERVACIONES)) $criteria->add(ActividadPeer::OBSERVACIONES, $this->observaciones);
		if ($this->isColumnModified(ActividadPeer::ID_SALA)) $criteria->add(ActividadPeer::ID_SALA, $this->id_sala);
		if ($this->isColumnModified(ActividadPeer::ID_TIPO_ACTIVIDAD)) $criteria->add(ActividadPeer::ID_TIPO_ACTIVIDAD, $this->id_tipo_actividad);
		if ($this->isColumnModified(ActividadPeer::FECHA)) $criteria->add(ActividadPeer::FECHA, $this->fecha);
		if ($this->isColumnModified(ActividadPeer::HORA)) $criteria->add(ActividadPeer::HORA, $this->hora);
		if ($this->isColumnModified(ActividadPeer::FACILITADOR)) $criteria->add(ActividadPeer::FACILITADOR, $this->facilitador);
		if ($this->isColumnModified(ActividadPeer::ID_FERIA)) $criteria->add(ActividadPeer::ID_FERIA, $this->id_feria);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ActividadPeer::DATABASE_NAME);
		$criteria->add(ActividadPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Actividad (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{
		$copyObj->setNombreActividad($this->nombre_actividad);
		$copyObj->setPonente($this->ponente);
		$copyObj->setTurno($this->turno);
		$copyObj->setEjecutada($this->ejecutada);
		$copyObj->setCantidadParticipantesM($this->cantidad_participantes_m);
		$copyObj->setCantidadParticipantesF($this->cantidad_participantes_f);
		$copyObj->setAlcanzoTiempo($this->alcanzo_tiempo);
		$copyObj->setCausasIncumplimiento($this->causas_incumplimiento);
		$copyObj->setIdMunicipio($this->id_municipio);
		$copyObj->setEscuela($this->escuela);
		$copyObj->setRefugio($this->refugio);
		$copyObj->setObservaciones($this->observaciones);
		$copyObj->setIdSala($this->id_sala);
		$copyObj->setIdTipoActividad($this->id_tipo_actividad);
		$copyObj->setFecha($this->fecha);
		$copyObj->setHora($this->hora);
		$copyObj->setFacilitador($this->facilitador);
		$copyObj->setIdFeria($this->id_feria);

		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getPonenteRelActividads() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPonenteRelActividad($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);
		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Actividad Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ActividadPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ActividadPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Sala object.
	 *
	 * @param      Sala $v
	 * @return     Actividad The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSala(Sala $v = null)
	{
		if ($v === null) {
			$this->setIdSala(NULL);
		} else {
			$this->setIdSala($v->getId());
		}

		$this->aSala = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Sala object, it will not be re-added.
		if ($v !== null) {
			$v->addActividad($this);
		}

		return $this;
	}


	/**
	 * Get the associated Sala object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Sala The associated Sala object.
	 * @throws     PropelException
	 */
	public function getSala(PropelPDO $con = null)
	{
		if ($this->aSala === null && ($this->id_sala !== null)) {
			$this->aSala = SalaQuery::create()->findPk($this->id_sala, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aSala->addActividads($this);
			 */
		}
		return $this->aSala;
	}

	/**
	 * Declares an association between this object and a TipoActividad object.
	 *
	 * @param      TipoActividad $v
	 * @return     Actividad The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTipoActividad(TipoActividad $v = null)
	{
		if ($v === null) {
			$this->setIdTipoActividad(NULL);
		} else {
			$this->setIdTipoActividad($v->getId());
		}

		$this->aTipoActividad = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the TipoActividad object, it will not be re-added.
		if ($v !== null) {
			$v->addActividad($this);
		}

		return $this;
	}


	/**
	 * Get the associated TipoActividad object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     TipoActividad The associated TipoActividad object.
	 * @throws     PropelException
	 */
	public function getTipoActividad(PropelPDO $con = null)
	{
		if ($this->aTipoActividad === null && ($this->id_tipo_actividad !== null)) {
			$this->aTipoActividad = TipoActividadQuery::create()->findPk($this->id_tipo_actividad, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aTipoActividad->addActividads($this);
			 */
		}
		return $this->aTipoActividad;
	}

	/**
	 * Declares an association between this object and a Feria object.
	 *
	 * @param      Feria $v
	 * @return     Actividad The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setFeria(Feria $v = null)
	{
		if ($v === null) {
			$this->setIdFeria(NULL);
		} else {
			$this->setIdFeria($v->getId());
		}

		$this->aFeria = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Feria object, it will not be re-added.
		if ($v !== null) {
			$v->addActividad($this);
		}

		return $this;
	}


	/**
	 * Get the associated Feria object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Feria The associated Feria object.
	 * @throws     PropelException
	 */
	public function getFeria(PropelPDO $con = null)
	{
		if ($this->aFeria === null && ($this->id_feria !== null)) {
			$this->aFeria = FeriaQuery::create()->findPk($this->id_feria, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aFeria->addActividads($this);
			 */
		}
		return $this->aFeria;
	}

	/**
	 * Clears out the collPonenteRelActividads collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPonenteRelActividads()
	 */
	public function clearPonenteRelActividads()
	{
		$this->collPonenteRelActividads = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPonenteRelActividads collection.
	 *
	 * By default this just sets the collPonenteRelActividads collection to an empty array (like clearcollPonenteRelActividads());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPonenteRelActividads()
	{
		$this->collPonenteRelActividads = new PropelObjectCollection();
		$this->collPonenteRelActividads->setModel('PonenteRelActividad');
	}

	/**
	 * Gets an array of PonenteRelActividad objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Actividad is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array PonenteRelActividad[] List of PonenteRelActividad objects
	 * @throws     PropelException
	 */
	public function getPonenteRelActividads($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collPonenteRelActividads || null !== $criteria) {
			if ($this->isNew() && null === $this->collPonenteRelActividads) {
				// return empty collection
				$this->initPonenteRelActividads();
			} else {
				$collPonenteRelActividads = PonenteRelActividadQuery::create(null, $criteria)
					->filterByActividad($this)
					->find($con);
				if (null !== $criteria) {
					return $collPonenteRelActividads;
				}
				$this->collPonenteRelActividads = $collPonenteRelActividads;
			}
		}
		return $this->collPonenteRelActividads;
	}

	/**
	 * Returns the number of related PonenteRelActividad objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PonenteRelActividad objects.
	 * @throws     PropelException
	 */
	public function countPonenteRelActividads(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collPonenteRelActividads || null !== $criteria) {
			if ($this->isNew() && null === $this->collPonenteRelActividads) {
				return 0;
			} else {
				$query = PonenteRelActividadQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByActividad($this)
					->count($con);
			}
		} else {
			return count($this->collPonenteRelActividads);
		}
	}

	/**
	 * Method called to associate a PonenteRelActividad object to this object
	 * through the PonenteRelActividad foreign key attribute.
	 *
	 * @param      PonenteRelActividad $l PonenteRelActividad
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPonenteRelActividad(PonenteRelActividad $l)
	{
		if ($this->collPonenteRelActividads === null) {
			$this->initPonenteRelActividads();
		}
		if (!$this->collPonenteRelActividads->contains($l)) { // only add it if the **same** object is not already associated
			$this->collPonenteRelActividads[]= $l;
			$l->setActividad($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Actividad is new, it will return
	 * an empty collection; or if this Actividad has previously
	 * been saved, it will retrieve related PonenteRelActividads from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Actividad.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array PonenteRelActividad[] List of PonenteRelActividad objects
	 */
	public function getPonenteRelActividadsJoinPonente($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = PonenteRelActividadQuery::create(null, $criteria);
		$query->joinWith('Ponente', $join_behavior);

		return $this->getPonenteRelActividads($query, $con);
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->nombre_actividad = null;
		$this->ponente = null;
		$this->turno = null;
		$this->ejecutada = null;
		$this->cantidad_participantes_m = null;
		$this->cantidad_participantes_f = null;
		$this->alcanzo_tiempo = null;
		$this->causas_incumplimiento = null;
		$this->id_municipio = null;
		$this->escuela = null;
		$this->refugio = null;
		$this->observaciones = null;
		$this->id_sala = null;
		$this->id_tipo_actividad = null;
		$this->fecha = null;
		$this->hora = null;
		$this->facilitador = null;
		$this->id_feria = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collPonenteRelActividads) {
				foreach ((array) $this->collPonenteRelActividads as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collPonenteRelActividads = null;
		$this->aSala = null;
		$this->aTipoActividad = null;
		$this->aFeria = null;
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseActividad:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BaseActividad
