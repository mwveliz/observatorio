<?php


/**
 * Base class that represents a row from the 'tipodestino' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Thu Feb 20 13:36:21 2014
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTipodestino extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'TipodestinoPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TipodestinoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the ente_publico field.
	 * @var        boolean
	 */
	protected $ente_publico;

	/**
	 * The value for the donacion field.
	 * @var        boolean
	 */
	protected $donacion;

	/**
	 * The value for the gratuita field.
	 * @var        boolean
	 */
	protected $gratuita;

	/**
	 * The value for the importacion field.
	 * @var        boolean
	 */
	protected $importacion;

	/**
	 * The value for the exportacion field.
	 * @var        boolean
	 */
	protected $exportacion;

	/**
	 * The value for the otro field.
	 * @var        string
	 */
	protected $otro;

	/**
	 * The value for the id_feria field.
	 * @var        int
	 */
	protected $id_feria;

	/**
	 * The value for the id_pais field.
	 * @var        int
	 */
	protected $id_pais;

	/**
	 * The value for the id_estado field.
	 * @var        int
	 */
	protected $id_estado;

	/**
	 * The value for the id_libreria field.
	 * @var        int
	 */
	protected $id_libreria;

	/**
	 * The value for the id_municipio field.
	 * @var        int
	 */
	protected $id_municipio;

	/**
	 * @var        Feria
	 */
	protected $aFeria;

	/**
	 * @var        Pais
	 */
	protected $aPais;

	/**
	 * @var        Estado
	 */
	protected $aEstado;

	/**
	 * @var        Libreria
	 */
	protected $aLibreria;

	/**
	 * @var        Municipio
	 */
	protected $aMunicipio;

	/**
	 * @var        array Distribucion[] Collection to store aggregation of Distribucion objects.
	 */
	protected $collDistribucions;

	/**
	 * @var        array Venta[] Collection to store aggregation of Venta objects.
	 */
	protected $collVentas;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [ente_publico] column value.
	 * 
	 * @return     boolean
	 */
	public function getEntePublico()
	{
		return $this->ente_publico;
	}

	/**
	 * Get the [donacion] column value.
	 * 
	 * @return     boolean
	 */
	public function getDonacion()
	{
		return $this->donacion;
	}

	/**
	 * Get the [gratuita] column value.
	 * 
	 * @return     boolean
	 */
	public function getGratuita()
	{
		return $this->gratuita;
	}

	/**
	 * Get the [importacion] column value.
	 * 
	 * @return     boolean
	 */
	public function getImportacion()
	{
		return $this->importacion;
	}

	/**
	 * Get the [exportacion] column value.
	 * 
	 * @return     boolean
	 */
	public function getExportacion()
	{
		return $this->exportacion;
	}

	/**
	 * Get the [otro] column value.
	 * 
	 * @return     string
	 */
	public function getOtro()
	{
		return $this->otro;
	}

	/**
	 * Get the [id_feria] column value.
	 * 
	 * @return     int
	 */
	public function getIdFeria()
	{
		return $this->id_feria;
	}

	/**
	 * Get the [id_pais] column value.
	 * 
	 * @return     int
	 */
	public function getIdPais()
	{
		return $this->id_pais;
	}

	/**
	 * Get the [id_estado] column value.
	 * 
	 * @return     int
	 */
	public function getIdEstado()
	{
		return $this->id_estado;
	}

	/**
	 * Get the [id_libreria] column value.
	 * 
	 * @return     int
	 */
	public function getIdLibreria()
	{
		return $this->id_libreria;
	}

	/**
	 * Get the [id_municipio] column value.
	 * 
	 * @return     int
	 */
	public function getIdMunicipio()
	{
		return $this->id_municipio;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = TipodestinoPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [ente_publico] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setEntePublico($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->ente_publico !== $v) {
			$this->ente_publico = $v;
			$this->modifiedColumns[] = TipodestinoPeer::ENTE_PUBLICO;
		}

		return $this;
	} // setEntePublico()

	/**
	 * Set the value of [donacion] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setDonacion($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->donacion !== $v) {
			$this->donacion = $v;
			$this->modifiedColumns[] = TipodestinoPeer::DONACION;
		}

		return $this;
	} // setDonacion()

	/**
	 * Set the value of [gratuita] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setGratuita($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->gratuita !== $v) {
			$this->gratuita = $v;
			$this->modifiedColumns[] = TipodestinoPeer::GRATUITA;
		}

		return $this;
	} // setGratuita()

	/**
	 * Set the value of [importacion] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setImportacion($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->importacion !== $v) {
			$this->importacion = $v;
			$this->modifiedColumns[] = TipodestinoPeer::IMPORTACION;
		}

		return $this;
	} // setImportacion()

	/**
	 * Set the value of [exportacion] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setExportacion($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->exportacion !== $v) {
			$this->exportacion = $v;
			$this->modifiedColumns[] = TipodestinoPeer::EXPORTACION;
		}

		return $this;
	} // setExportacion()

	/**
	 * Set the value of [otro] column.
	 * 
	 * @param      string $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setOtro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otro !== $v) {
			$this->otro = $v;
			$this->modifiedColumns[] = TipodestinoPeer::OTRO;
		}

		return $this;
	} // setOtro()

	/**
	 * Set the value of [id_feria] column.
	 * 
	 * @param      int $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setIdFeria($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_feria !== $v) {
			$this->id_feria = $v;
			$this->modifiedColumns[] = TipodestinoPeer::ID_FERIA;
		}

		if ($this->aFeria !== null && $this->aFeria->getId() !== $v) {
			$this->aFeria = null;
		}

		return $this;
	} // setIdFeria()

	/**
	 * Set the value of [id_pais] column.
	 * 
	 * @param      int $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setIdPais($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_pais !== $v) {
			$this->id_pais = $v;
			$this->modifiedColumns[] = TipodestinoPeer::ID_PAIS;
		}

		if ($this->aPais !== null && $this->aPais->getId() !== $v) {
			$this->aPais = null;
		}

		return $this;
	} // setIdPais()

	/**
	 * Set the value of [id_estado] column.
	 * 
	 * @param      int $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setIdEstado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_estado !== $v) {
			$this->id_estado = $v;
			$this->modifiedColumns[] = TipodestinoPeer::ID_ESTADO;
		}

		if ($this->aEstado !== null && $this->aEstado->getId() !== $v) {
			$this->aEstado = null;
		}

		return $this;
	} // setIdEstado()

	/**
	 * Set the value of [id_libreria] column.
	 * 
	 * @param      int $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setIdLibreria($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_libreria !== $v) {
			$this->id_libreria = $v;
			$this->modifiedColumns[] = TipodestinoPeer::ID_LIBRERIA;
		}

		if ($this->aLibreria !== null && $this->aLibreria->getId() !== $v) {
			$this->aLibreria = null;
		}

		return $this;
	} // setIdLibreria()

	/**
	 * Set the value of [id_municipio] column.
	 * 
	 * @param      int $v new value
	 * @return     Tipodestino The current object (for fluent API support)
	 */
	public function setIdMunicipio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_municipio !== $v) {
			$this->id_municipio = $v;
			$this->modifiedColumns[] = TipodestinoPeer::ID_MUNICIPIO;
		}

		if ($this->aMunicipio !== null && $this->aMunicipio->getId() !== $v) {
			$this->aMunicipio = null;
		}

		return $this;
	} // setIdMunicipio()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->ente_publico = ($row[$startcol + 1] !== null) ? (boolean) $row[$startcol + 1] : null;
			$this->donacion = ($row[$startcol + 2] !== null) ? (boolean) $row[$startcol + 2] : null;
			$this->gratuita = ($row[$startcol + 3] !== null) ? (boolean) $row[$startcol + 3] : null;
			$this->importacion = ($row[$startcol + 4] !== null) ? (boolean) $row[$startcol + 4] : null;
			$this->exportacion = ($row[$startcol + 5] !== null) ? (boolean) $row[$startcol + 5] : null;
			$this->otro = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->id_feria = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->id_pais = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->id_estado = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->id_libreria = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->id_municipio = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 12; // 12 = TipodestinoPeer::NUM_COLUMNS - TipodestinoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tipodestino object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aFeria !== null && $this->id_feria !== $this->aFeria->getId()) {
			$this->aFeria = null;
		}
		if ($this->aPais !== null && $this->id_pais !== $this->aPais->getId()) {
			$this->aPais = null;
		}
		if ($this->aEstado !== null && $this->id_estado !== $this->aEstado->getId()) {
			$this->aEstado = null;
		}
		if ($this->aLibreria !== null && $this->id_libreria !== $this->aLibreria->getId()) {
			$this->aLibreria = null;
		}
		if ($this->aMunicipio !== null && $this->id_municipio !== $this->aMunicipio->getId()) {
			$this->aMunicipio = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TipodestinoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TipodestinoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aFeria = null;
			$this->aPais = null;
			$this->aEstado = null;
			$this->aLibreria = null;
			$this->aMunicipio = null;
			$this->collDistribucions = null;

			$this->collVentas = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TipodestinoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTipodestino:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				TipodestinoQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTipodestino:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TipodestinoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTipodestino:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTipodestino:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				TipodestinoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aFeria !== null) {
				if ($this->aFeria->isModified() || $this->aFeria->isNew()) {
					$affectedRows += $this->aFeria->save($con);
				}
				$this->setFeria($this->aFeria);
			}

			if ($this->aPais !== null) {
				if ($this->aPais->isModified() || $this->aPais->isNew()) {
					$affectedRows += $this->aPais->save($con);
				}
				$this->setPais($this->aPais);
			}

			if ($this->aEstado !== null) {
				if ($this->aEstado->isModified() || $this->aEstado->isNew()) {
					$affectedRows += $this->aEstado->save($con);
				}
				$this->setEstado($this->aEstado);
			}

			if ($this->aLibreria !== null) {
				if ($this->aLibreria->isModified() || $this->aLibreria->isNew()) {
					$affectedRows += $this->aLibreria->save($con);
				}
				$this->setLibreria($this->aLibreria);
			}

			if ($this->aMunicipio !== null) {
				if ($this->aMunicipio->isModified() || $this->aMunicipio->isNew()) {
					$affectedRows += $this->aMunicipio->save($con);
				}
				$this->setMunicipio($this->aMunicipio);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TipodestinoPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(TipodestinoPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.TipodestinoPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows += 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows += TipodestinoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collDistribucions !== null) {
				foreach ($this->collDistribucions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVentas !== null) {
				foreach ($this->collVentas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aFeria !== null) {
				if (!$this->aFeria->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aFeria->getValidationFailures());
				}
			}

			if ($this->aPais !== null) {
				if (!$this->aPais->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPais->getValidationFailures());
				}
			}

			if ($this->aEstado !== null) {
				if (!$this->aEstado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEstado->getValidationFailures());
				}
			}

			if ($this->aLibreria !== null) {
				if (!$this->aLibreria->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aLibreria->getValidationFailures());
				}
			}

			if ($this->aMunicipio !== null) {
				if (!$this->aMunicipio->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMunicipio->getValidationFailures());
				}
			}


			if (($retval = TipodestinoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collDistribucions !== null) {
					foreach ($this->collDistribucions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVentas !== null) {
					foreach ($this->collVentas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TipodestinoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getEntePublico();
				break;
			case 2:
				return $this->getDonacion();
				break;
			case 3:
				return $this->getGratuita();
				break;
			case 4:
				return $this->getImportacion();
				break;
			case 5:
				return $this->getExportacion();
				break;
			case 6:
				return $this->getOtro();
				break;
			case 7:
				return $this->getIdFeria();
				break;
			case 8:
				return $this->getIdPais();
				break;
			case 9:
				return $this->getIdEstado();
				break;
			case 10:
				return $this->getIdLibreria();
				break;
			case 11:
				return $this->getIdMunicipio();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $includeForeignObjects = false)
	{
		$keys = TipodestinoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getEntePublico(),
			$keys[2] => $this->getDonacion(),
			$keys[3] => $this->getGratuita(),
			$keys[4] => $this->getImportacion(),
			$keys[5] => $this->getExportacion(),
			$keys[6] => $this->getOtro(),
			$keys[7] => $this->getIdFeria(),
			$keys[8] => $this->getIdPais(),
			$keys[9] => $this->getIdEstado(),
			$keys[10] => $this->getIdLibreria(),
			$keys[11] => $this->getIdMunicipio(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->aFeria) {
				$result['Feria'] = $this->aFeria->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aPais) {
				$result['Pais'] = $this->aPais->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aEstado) {
				$result['Estado'] = $this->aEstado->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aLibreria) {
				$result['Libreria'] = $this->aLibreria->toArray($keyType, $includeLazyLoadColumns, true);
			}
			if (null !== $this->aMunicipio) {
				$result['Municipio'] = $this->aMunicipio->toArray($keyType, $includeLazyLoadColumns, true);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TipodestinoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setEntePublico($value);
				break;
			case 2:
				$this->setDonacion($value);
				break;
			case 3:
				$this->setGratuita($value);
				break;
			case 4:
				$this->setImportacion($value);
				break;
			case 5:
				$this->setExportacion($value);
				break;
			case 6:
				$this->setOtro($value);
				break;
			case 7:
				$this->setIdFeria($value);
				break;
			case 8:
				$this->setIdPais($value);
				break;
			case 9:
				$this->setIdEstado($value);
				break;
			case 10:
				$this->setIdLibreria($value);
				break;
			case 11:
				$this->setIdMunicipio($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TipodestinoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setEntePublico($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setDonacion($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setGratuita($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setImportacion($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setExportacion($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setOtro($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIdFeria($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIdPais($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIdEstado($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setIdLibreria($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setIdMunicipio($arr[$keys[11]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TipodestinoPeer::DATABASE_NAME);

		if ($this->isColumnModified(TipodestinoPeer::ID)) $criteria->add(TipodestinoPeer::ID, $this->id);
		if ($this->isColumnModified(TipodestinoPeer::ENTE_PUBLICO)) $criteria->add(TipodestinoPeer::ENTE_PUBLICO, $this->ente_publico);
		if ($this->isColumnModified(TipodestinoPeer::DONACION)) $criteria->add(TipodestinoPeer::DONACION, $this->donacion);
		if ($this->isColumnModified(TipodestinoPeer::GRATUITA)) $criteria->add(TipodestinoPeer::GRATUITA, $this->gratuita);
		if ($this->isColumnModified(TipodestinoPeer::IMPORTACION)) $criteria->add(TipodestinoPeer::IMPORTACION, $this->importacion);
		if ($this->isColumnModified(TipodestinoPeer::EXPORTACION)) $criteria->add(TipodestinoPeer::EXPORTACION, $this->exportacion);
		if ($this->isColumnModified(TipodestinoPeer::OTRO)) $criteria->add(TipodestinoPeer::OTRO, $this->otro);
		if ($this->isColumnModified(TipodestinoPeer::ID_FERIA)) $criteria->add(TipodestinoPeer::ID_FERIA, $this->id_feria);
		if ($this->isColumnModified(TipodestinoPeer::ID_PAIS)) $criteria->add(TipodestinoPeer::ID_PAIS, $this->id_pais);
		if ($this->isColumnModified(TipodestinoPeer::ID_ESTADO)) $criteria->add(TipodestinoPeer::ID_ESTADO, $this->id_estado);
		if ($this->isColumnModified(TipodestinoPeer::ID_LIBRERIA)) $criteria->add(TipodestinoPeer::ID_LIBRERIA, $this->id_libreria);
		if ($this->isColumnModified(TipodestinoPeer::ID_MUNICIPIO)) $criteria->add(TipodestinoPeer::ID_MUNICIPIO, $this->id_municipio);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TipodestinoPeer::DATABASE_NAME);
		$criteria->add(TipodestinoPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tipodestino (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{
		$copyObj->setEntePublico($this->ente_publico);
		$copyObj->setDonacion($this->donacion);
		$copyObj->setGratuita($this->gratuita);
		$copyObj->setImportacion($this->importacion);
		$copyObj->setExportacion($this->exportacion);
		$copyObj->setOtro($this->otro);
		$copyObj->setIdFeria($this->id_feria);
		$copyObj->setIdPais($this->id_pais);
		$copyObj->setIdEstado($this->id_estado);
		$copyObj->setIdLibreria($this->id_libreria);
		$copyObj->setIdMunicipio($this->id_municipio);

		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getDistribucions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDistribucion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVentas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVenta($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);
		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tipodestino Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TipodestinoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TipodestinoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Feria object.
	 *
	 * @param      Feria $v
	 * @return     Tipodestino The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setFeria(Feria $v = null)
	{
		if ($v === null) {
			$this->setIdFeria(NULL);
		} else {
			$this->setIdFeria($v->getId());
		}

		$this->aFeria = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Feria object, it will not be re-added.
		if ($v !== null) {
			$v->addTipodestino($this);
		}

		return $this;
	}


	/**
	 * Get the associated Feria object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Feria The associated Feria object.
	 * @throws     PropelException
	 */
	public function getFeria(PropelPDO $con = null)
	{
		if ($this->aFeria === null && ($this->id_feria !== null)) {
			$this->aFeria = FeriaQuery::create()->findPk($this->id_feria, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aFeria->addTipodestinos($this);
			 */
		}
		return $this->aFeria;
	}

	/**
	 * Declares an association between this object and a Pais object.
	 *
	 * @param      Pais $v
	 * @return     Tipodestino The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPais(Pais $v = null)
	{
		if ($v === null) {
			$this->setIdPais(NULL);
		} else {
			$this->setIdPais($v->getId());
		}

		$this->aPais = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Pais object, it will not be re-added.
		if ($v !== null) {
			$v->addTipodestino($this);
		}

		return $this;
	}


	/**
	 * Get the associated Pais object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Pais The associated Pais object.
	 * @throws     PropelException
	 */
	public function getPais(PropelPDO $con = null)
	{
		if ($this->aPais === null && ($this->id_pais !== null)) {
			$this->aPais = PaisQuery::create()->findPk($this->id_pais, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aPais->addTipodestinos($this);
			 */
		}
		return $this->aPais;
	}

	/**
	 * Declares an association between this object and a Estado object.
	 *
	 * @param      Estado $v
	 * @return     Tipodestino The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEstado(Estado $v = null)
	{
		if ($v === null) {
			$this->setIdEstado(NULL);
		} else {
			$this->setIdEstado($v->getId());
		}

		$this->aEstado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Estado object, it will not be re-added.
		if ($v !== null) {
			$v->addTipodestino($this);
		}

		return $this;
	}


	/**
	 * Get the associated Estado object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Estado The associated Estado object.
	 * @throws     PropelException
	 */
	public function getEstado(PropelPDO $con = null)
	{
		if ($this->aEstado === null && ($this->id_estado !== null)) {
			$this->aEstado = EstadoQuery::create()->findPk($this->id_estado, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aEstado->addTipodestinos($this);
			 */
		}
		return $this->aEstado;
	}

	/**
	 * Declares an association between this object and a Libreria object.
	 *
	 * @param      Libreria $v
	 * @return     Tipodestino The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setLibreria(Libreria $v = null)
	{
		if ($v === null) {
			$this->setIdLibreria(NULL);
		} else {
			$this->setIdLibreria($v->getId());
		}

		$this->aLibreria = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Libreria object, it will not be re-added.
		if ($v !== null) {
			$v->addTipodestino($this);
		}

		return $this;
	}


	/**
	 * Get the associated Libreria object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Libreria The associated Libreria object.
	 * @throws     PropelException
	 */
	public function getLibreria(PropelPDO $con = null)
	{
		if ($this->aLibreria === null && ($this->id_libreria !== null)) {
			$this->aLibreria = LibreriaQuery::create()->findPk($this->id_libreria, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aLibreria->addTipodestinos($this);
			 */
		}
		return $this->aLibreria;
	}

	/**
	 * Declares an association between this object and a Municipio object.
	 *
	 * @param      Municipio $v
	 * @return     Tipodestino The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMunicipio(Municipio $v = null)
	{
		if ($v === null) {
			$this->setIdMunicipio(NULL);
		} else {
			$this->setIdMunicipio($v->getId());
		}

		$this->aMunicipio = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Municipio object, it will not be re-added.
		if ($v !== null) {
			$v->addTipodestino($this);
		}

		return $this;
	}


	/**
	 * Get the associated Municipio object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Municipio The associated Municipio object.
	 * @throws     PropelException
	 */
	public function getMunicipio(PropelPDO $con = null)
	{
		if ($this->aMunicipio === null && ($this->id_municipio !== null)) {
			$this->aMunicipio = MunicipioQuery::create()->findPk($this->id_municipio, $con);
			/* The following can be used additionally to
				 guarantee the related object contains a reference
				 to this object.  This level of coupling may, however, be
				 undesirable since it could result in an only partially populated collection
				 in the referenced object.
				 $this->aMunicipio->addTipodestinos($this);
			 */
		}
		return $this->aMunicipio;
	}

	/**
	 * Clears out the collDistribucions collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDistribucions()
	 */
	public function clearDistribucions()
	{
		$this->collDistribucions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDistribucions collection.
	 *
	 * By default this just sets the collDistribucions collection to an empty array (like clearcollDistribucions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDistribucions()
	{
		$this->collDistribucions = new PropelObjectCollection();
		$this->collDistribucions->setModel('Distribucion');
	}

	/**
	 * Gets an array of Distribucion objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Tipodestino is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Distribucion[] List of Distribucion objects
	 * @throws     PropelException
	 */
	public function getDistribucions($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collDistribucions || null !== $criteria) {
			if ($this->isNew() && null === $this->collDistribucions) {
				// return empty collection
				$this->initDistribucions();
			} else {
				$collDistribucions = DistribucionQuery::create(null, $criteria)
					->filterByTipodestino($this)
					->find($con);
				if (null !== $criteria) {
					return $collDistribucions;
				}
				$this->collDistribucions = $collDistribucions;
			}
		}
		return $this->collDistribucions;
	}

	/**
	 * Returns the number of related Distribucion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Distribucion objects.
	 * @throws     PropelException
	 */
	public function countDistribucions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collDistribucions || null !== $criteria) {
			if ($this->isNew() && null === $this->collDistribucions) {
				return 0;
			} else {
				$query = DistribucionQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByTipodestino($this)
					->count($con);
			}
		} else {
			return count($this->collDistribucions);
		}
	}

	/**
	 * Method called to associate a Distribucion object to this object
	 * through the Distribucion foreign key attribute.
	 *
	 * @param      Distribucion $l Distribucion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDistribucion(Distribucion $l)
	{
		if ($this->collDistribucions === null) {
			$this->initDistribucions();
		}
		if (!$this->collDistribucions->contains($l)) { // only add it if the **same** object is not already associated
			$this->collDistribucions[]= $l;
			$l->setTipodestino($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tipodestino is new, it will return
	 * an empty collection; or if this Tipodestino has previously
	 * been saved, it will retrieve related Distribucions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tipodestino.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Distribucion[] List of Distribucion objects
	 */
	public function getDistribucionsJoinEdicion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = DistribucionQuery::create(null, $criteria);
		$query->joinWith('Edicion', $join_behavior);

		return $this->getDistribucions($query, $con);
	}

	/**
	 * Clears out the collVentas collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVentas()
	 */
	public function clearVentas()
	{
		$this->collVentas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVentas collection.
	 *
	 * By default this just sets the collVentas collection to an empty array (like clearcollVentas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVentas()
	{
		$this->collVentas = new PropelObjectCollection();
		$this->collVentas->setModel('Venta');
	}

	/**
	 * Gets an array of Venta objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Tipodestino is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Venta[] List of Venta objects
	 * @throws     PropelException
	 */
	public function getVentas($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collVentas || null !== $criteria) {
			if ($this->isNew() && null === $this->collVentas) {
				// return empty collection
				$this->initVentas();
			} else {
				$collVentas = VentaQuery::create(null, $criteria)
					->filterByTipodestino($this)
					->find($con);
				if (null !== $criteria) {
					return $collVentas;
				}
				$this->collVentas = $collVentas;
			}
		}
		return $this->collVentas;
	}

	/**
	 * Returns the number of related Venta objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Venta objects.
	 * @throws     PropelException
	 */
	public function countVentas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collVentas || null !== $criteria) {
			if ($this->isNew() && null === $this->collVentas) {
				return 0;
			} else {
				$query = VentaQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByTipodestino($this)
					->count($con);
			}
		} else {
			return count($this->collVentas);
		}
	}

	/**
	 * Method called to associate a Venta object to this object
	 * through the Venta foreign key attribute.
	 *
	 * @param      Venta $l Venta
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVenta(Venta $l)
	{
		if ($this->collVentas === null) {
			$this->initVentas();
		}
		if (!$this->collVentas->contains($l)) { // only add it if the **same** object is not already associated
			$this->collVentas[]= $l;
			$l->setTipodestino($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tipodestino is new, it will return
	 * an empty collection; or if this Tipodestino has previously
	 * been saved, it will retrieve related Ventas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tipodestino.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Venta[] List of Venta objects
	 */
	public function getVentasJoinLibreria($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = VentaQuery::create(null, $criteria);
		$query->joinWith('Libreria', $join_behavior);

		return $this->getVentas($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tipodestino is new, it will return
	 * an empty collection; or if this Tipodestino has previously
	 * been saved, it will retrieve related Ventas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tipodestino.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Venta[] List of Venta objects
	 */
	public function getVentasJoinEdicion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = VentaQuery::create(null, $criteria);
		$query->joinWith('Edicion', $join_behavior);

		return $this->getVentas($query, $con);
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->ente_publico = null;
		$this->donacion = null;
		$this->gratuita = null;
		$this->importacion = null;
		$this->exportacion = null;
		$this->otro = null;
		$this->id_feria = null;
		$this->id_pais = null;
		$this->id_estado = null;
		$this->id_libreria = null;
		$this->id_municipio = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collDistribucions) {
				foreach ((array) $this->collDistribucions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVentas) {
				foreach ((array) $this->collVentas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collDistribucions = null;
		$this->collVentas = null;
		$this->aFeria = null;
		$this->aPais = null;
		$this->aEstado = null;
		$this->aLibreria = null;
		$this->aMunicipio = null;
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseTipodestino:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BaseTipodestino
