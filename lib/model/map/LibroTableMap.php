<?php



/**
 * This class defines the structure of the 'libro' table.
 *
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Thu Feb 20 13:36:21 2014
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    propel.generator.lib.model.map
 */
class LibroTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.LibroTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('libro');
		$this->setPhpName('Libro');
		$this->setClassname('Libro');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		$this->setPrimaryKeyMethodInfo('libro_id_seq');
		// columns
		$this->addColumn('TITULO', 'Titulo', 'VARCHAR', false, 255, null);
		$this->addColumn('SUBTITULO', 'Subtitulo', 'VARCHAR', false, 255, null);
		$this->addForeignKey('ID_GENERO', 'IdGenero', 'INTEGER', 'genero', 'ID', false, null, null);
		$this->addForeignKey('ID_TEMATICA', 'IdTematica', 'INTEGER', 'tematica', 'ID', false, null, null);
		$this->addForeignKey('ID_AUTOR', 'IdAutor', 'INTEGER', 'autor', 'ID', false, null, null);
		$this->addForeignKey('ID_MATERIA', 'IdMateria', 'INTEGER', 'materia', 'ID', false, null, null);
		$this->addForeignKey('ID_TIPOPUBLICACION', 'IdTipopublicacion', 'INTEGER', 'tipopublicacion', 'ID', false, null, null);
		$this->addColumn('SINOPSIS', 'Sinopsis', 'VARCHAR', false, 255, null);
		$this->addColumn('CANTIDAD_LIBRO', 'CantidadLibro', 'VARCHAR', false, 255, null);
		$this->addColumn('COMPILADOR', 'Compilador', 'VARCHAR', false, 255, null);
		$this->addPrimaryKey('ID', 'Id', 'BIGINT', true, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('Genero', 'Genero', RelationMap::MANY_TO_ONE, array('id_genero' => 'id', ), null, 'CASCADE');
    $this->addRelation('Tematica', 'Tematica', RelationMap::MANY_TO_ONE, array('id_tematica' => 'id', ), null, 'CASCADE');
    $this->addRelation('Autor', 'Autor', RelationMap::MANY_TO_ONE, array('id_autor' => 'id', ), null, 'CASCADE');
    $this->addRelation('Materia', 'Materia', RelationMap::MANY_TO_ONE, array('id_materia' => 'id', ), null, 'CASCADE');
    $this->addRelation('Tipopublicacion', 'Tipopublicacion', RelationMap::MANY_TO_ONE, array('id_tipopublicacion' => 'id', ), null, 'CASCADE');
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // LibroTableMap
